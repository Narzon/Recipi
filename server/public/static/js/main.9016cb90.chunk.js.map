{"version":3,"sources":["components/LoginForm.js","components/PostRecipe.js","components/Map.js","components/methods/ChangeRating.js","components/RecipeDescription.js","components/methods/ShowDesc.js","components/methods/LoadRecipes.js","components/methods/LoadRandomRecipe.js","components/methods/LoadRecipeFromMap.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","register","registerForm","backToLogin","handleLogin","isLoading","preventDefault","_this$state","state","email","password","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","success","saveToken","token","localStorage","setItem","toHome","signUpError","message","alert","handleSubmit","_this$state2","username","validSession","length","_this2","react_default","a","createElement","react_router","to","Container","style","height","className","onSubmit","FormGroup","controlId","bsSize","FormLabel","FormControl","autoFocus","type","onChange","Button","block","disabled","validateForm","variant","onClick","Component","PostRecipe","title","shortDesc","longDesc","ingredients","instructions","imageURL","restaurant","city","ingredientsArray","replace","split","map","item","toUpperCase","slice","user","description","longDescription","image","goBack","recipe","console","log","placeholder","as","rows","React","mapStyles","width","MapContainer","_Component","onMarkerClick","marker","e","dir","selectedPlace","activeMarker","showingInfoWindow","onClose","userLocation","lat","lng","recipiMarkers","displayMarkers","inherits","createClass","key","navigator","geolocation","getCurrentPosition","position","_position$coords","coords","latitude","longitude","markers","i","newMarker","dist","location","capitalize_Words","name","push","str","txt","charAt","substr","toLowerCase","_this3","content","loadRecipeFromMap","oldSelf","cursor","ReactDOM","render","Children","only","document","getElementById","_this4","google","zoom","initialCenter","visible","onOpen","onInfoWindowOpen","GoogleApiWrapper","apiKey","changeRating","index","plus","self","change","userData","recipeTitle","concat","newRecipe","result","newRecipeArray","toConsumableArray","recipes","ratingButtons","paddingTop","fontWeight","rating","Col","xs","sm","textAlign","showDesc","src","fontStyle","jsUcfirst","recipeDescription","loadRecipes","searchTerm","handleSearch","showMyRecipes","RecipeDescription","componentDidMount","loadComments","isLoggedIn","commentSubmit","commentText","newComments","comment","border","margin","padding","borderRadius","opacity","date","comments","reverse","handleCommentSubmit","currentUser","comForm","Form","Group","Control","maxHeight","imgSrc","backgroundColor","elements","altGoBack","arrayOfElements","newComponent","components_RecipeDescription","window","scrollTo","allRecipes","myRecipes","sort","b","_loop","recipeItem","dontChange","goodJson","fontSize","recipeTitleByIndex","maxWidth","Promise","all","_loop2","loadRandomRecipe","Math","floor","random","showMap","Home","newSearch","lcSearch","newFiltRecipes","includes","filtRecipes","logout","inputRecipe","toggleMyRecipesText","redirectLogin","goLogin","bind","assertThisInitialized","showInput","ChangeRating","ShowDesc","LoadRecipes","LoadRandomRecipe","toggleMyRecipes","toggleMap","LoadRecipeFromMap","userName","doRefresh","components_PostRecipe","Map","displayedRecipes","Row","App","getItem","newToken","react_router_dom","href","color","fontFamily","exact","path","routeProps","components_LoginForm","assign","components_Home","Boolean","hostname","match","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9016cb90.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      username: \"\",\r\n      isLoading: true,\r\n      signUpError: \"\",\r\n      registerForm: false,\r\n      token: this.props.token,\r\n      validSession: false,\r\n      toHome: false\r\n    };\r\n  }\r\n\r\n  //make sure user has provided both inputs\r\n  validateForm() {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n  //methods handle whether or not to render the registration form\r\n  register = event => {\r\n    this.setState({ registerForm: true })\r\n  }\r\n  backToLogin = event => {\r\n    this.setState({ registerForm: false })\r\n  }\r\n  //attempt to login\r\n  handleLogin = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n    } = this.state;\r\n    fetch('/api/account/signin', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if server cannot authenticate, alert user\r\n        if (!json.success) {\r\n          this.setState({\r\n            signUpError: json.message\r\n          })\r\n          alert(\"invalid login\")\r\n          this.setState({ isLoading: false })\r\n        ///otherwise, save token to state and localstorage and attempt to send user to home\r\n        } else {\r\n          this.props.saveToken(json.token)\r\n          localStorage.setItem('tokenItem', json.token);\r\n          this.setState({ toHome: true, isLoading: false })\r\n        }\r\n\r\n      });\r\n  }\r\n  //attempt to register new user\r\n  handleSubmit = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n      username\r\n    } = this.state;\r\n    fetch('/api/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        username: username\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if registration is successful, alert user to success and return to login\r\n        if (json.success) {\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n            email: '',\r\n            password: '',\r\n            username: ''\r\n          });\r\n          this.setState({ registerForm: false })\r\n        } else {\r\n        //if registration is unsuccessful (doe to username or email being taken already), alert use to try again\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n          });\r\n          alert(\"Username or email taken! Try again.\")\r\n        }\r\n      });\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true })\r\n    //on mounting, attempt to validate any current token in state\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            validSession: true\r\n          });\r\n        } else {\r\n          this.setState({\r\n            validSession: false\r\n          });\r\n        }\r\n        this.setState({ isLoading: false })\r\n      });\r\n    \r\n  }\r\n  render() {\r\n    //if successful login is indicated, return to entrypage with new token\r\n    if (this.state.toHome) {\r\n      return <Redirect to='/home' />\r\n    }\r\n    //display Loading ... if appropriate\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <Container style={{height: \"900px\"}}> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n      )\r\n    }\r\n    //if it exists in state, render a registration form instead of login\r\n    if (this.state.registerForm) {\r\n      return (\r\n        <Container style={{height: \"900px\"}}>\r\n          <div className=\"Login\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"username\" bsSize=\"large\">\r\n                <FormLabel>Username  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.username}\r\n                  onChange={this.handleChange}\r\n                  type=\"username\"\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n                variant=\"info\"\r\n              >\r\n                Register\r\n            </Button>\r\n              <br></br>\r\n              <Button\r\n                block\r\n                bsSize=\"small\"\r\n                type=\"submit\"\r\n                variant=\"info\"\r\n                onClick={this.backToLogin}\r\n              >\r\n                Go Back\r\n            </Button>\r\n\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n    //if there is no token currently in state, or if there is a token that fails authentication, render the login form\r\n    if (!this.state.token || this.state.validSession === false) {\r\n      return (\r\n        <Container style={{height: \"900px\"}}>\r\n          <div>\r\n            <p>Login here: </p>\r\n            <form onSubmit={this.handleLogin}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n                variant=\"info\"\r\n              >\r\n                Login\r\n                </Button>\r\n\r\n            </form>\r\n            <br></br>\r\n\r\n\r\n            <Button\r\n              block\r\n              bsSize=\"large\"\r\n              type=\"button\"\r\n              variant=\"info\"\r\n              onClick={this.register}>\r\n              Register\r\n          </Button>\r\n          </div>\r\n        </Container>\r\n      )\r\n    }\r\n    //by default, send user to home (assumes authentication has not failed)\r\n    return (\r\n      <div>\r\n        <p>Signed in</p>\r\n        <div><Redirect to=\"/home\" /></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\n\r\nclass PostRecipe extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: \"\",\r\n            shortDesc: \"\",\r\n            longDesc: \"\",\r\n            ingredients: [],\r\n            instructions: \"\",\r\n            imageURL: \"\",\r\n            restaurant: \"\",\r\n            city: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //this.props.user\r\n\r\n    }\r\n    //post input data as new recipe to server\r\n    handleSubmit = event => {\r\n        this.setState({isLoading: true})\r\n        event.preventDefault();\r\n        const {\r\n            title,\r\n            shortDesc,\r\n            longDesc,\r\n            ingredients,\r\n            instructions,\r\n            imageURL,\r\n            restaurant,\r\n            city\r\n        } = this.state;\r\n        let ingredientsArray = ingredients.replace(/\\s*,\\s*/g, \",\").split(',')\r\n        ingredientsArray = ingredientsArray.map((item)=>{\r\n            if (item[0]) {\r\n                let newItem= \"\"+item[0].toUpperCase()+item.slice(1)\r\n                return newItem\r\n            }\r\n            return \"Unspecified\"\r\n        })\r\n        fetch('/api/recipes', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                token: this.props.token,\r\n                user: this.props.user,\r\n                title: title,\r\n                description: shortDesc,\r\n                longDescription: longDesc,\r\n                ingredients: ingredientsArray,\r\n                instructions: instructions,\r\n                image: imageURL\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n            //upon successful posting, go back\r\n            if (json.success) {\r\n                alert(\"Recipi saved!\")\r\n                this.props.goBack(true)\r\n            } else {\r\n                //else, alert user of error and remain on page\r\n                alert(\"Failed! Server error.\")\r\n            }\r\n        });\r\n\r\n        //attempt to post marker for google map\r\n        fetch('/api/markers', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                token: this.props.token,\r\n                recipe: title,\r\n                restaurant: restaurant,\r\n                city: city\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n            //upon successful posting, go back\r\n            if (json.success) {\r\n                console.log(\"marker saved successfully\")\r\n            } \r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n        [event.target.id]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        //render an input form for a new recipe\r\n        return (<div className=\"col\">\r\n        <h2 className=\"text-center\">Here's your form, {this.props.user}</h2>\r\n            <form onSubmit={this.handleSubmit}>\r\n                <FormGroup controlId=\"title\" bsSize=\"large\">\r\n                    <FormLabel>Recipi Title  </FormLabel>\r\n                    <FormControl\r\n                    autoFocus\r\n                    type=\"title\"\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Enter your Recipi title ... \"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"shortDesc\" bsSize=\"large\">\r\n                    <FormLabel>A short summay  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.shortDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"shortDesc\"\r\n                    as=\"textarea\" \r\n                    placeholder=\"Enter a short subtitle for your Recipi ... \"\r\n                    rows=\"2\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"longDesc\" bsSize=\"large\">\r\n                    <FormLabel>A longer description  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.longDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"longDesc\"\r\n                    as=\"textarea\" \r\n                    placeholder=\"Enter your full description or Recipi story here ...\"\r\n                    rows=\"4\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"instructions\" bsSize=\"large\">\r\n                    <FormLabel>Recipi instructions  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.instructions}\r\n                    onChange={this.handleChange}\r\n                    type=\"instructions\"\r\n                    as=\"textarea\"\r\n                    placeholder=\"Enter your instructions ... \" \r\n                    rows=\"4\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"ingredients\" bsSize=\"large\">\r\n                    <FormLabel>Ingredients  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.ingredients}\r\n                    onChange={this.handleChange}\r\n                    type=\"ingredients\"\r\n                    as=\"textarea\"\r\n                    placeholder=\"Separate by commas ...\" \r\n                    rows=\"4\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"imageURL\" bsSize=\"large\">\r\n                    <FormLabel>Image URL  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.imageURL}\r\n                    onChange={this.handleChange}\r\n                    type=\"imageURL\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"restaurant\" bsSize=\"large\">\r\n                    <FormLabel>(Optional) Restaurant  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.restaurant}\r\n                    onChange={this.handleChange}\r\n                    type=\"restaurant\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"city\" bsSize=\"large\">\r\n                    <FormLabel>(Optional) City  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.city}\r\n                    onChange={this.handleChange}\r\n                    type=\"city\"\r\n                    />\r\n                </FormGroup>\r\n                <Button\r\n                    block\r\n                    bsSize=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"info\"\r\n                >\r\n                    Submit your Recipi!\r\n                </Button>\r\n                <br></br>\r\n                <Button variant=\"info\" onClick={()=>{this.props.goBack(false)}}>Go back</Button>\r\n            </form>\r\n        </div>)\r\n    }\r\n    }\r\n\r\n    export default PostRecipe","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n  width: '100%',\r\n  height: '90%'\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      token: this.props.token,\r\n      isLoading: true,\r\n      showingInfoWindow: false,\r\n      activeMarker: {},\r\n      selectedPlace: {},\r\n      userLocation: { lat: 30.26, lng: -97.74 },\r\n      recipiMarkers: [],\r\n      displayMarkers: []\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      position => {\r\n        const { latitude, longitude } = position.coords;\r\n\r\n        this.setState({\r\n          userLocation: { lat: latitude, lng: longitude },\r\n          isLoading: false\r\n        });\r\n\r\n      },\r\n      () => {\r\n        //permission denied\r\n        this.setState({ isLoading: false });\r\n      }\r\n    );\r\n\r\n    fetch('/api/markers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'token': this.state.token\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(markers => {\r\n        let recipiMarkers = this.state.recipiMarkers\r\n        for (let i = 0; i < markers.length; i++) {\r\n          console.dir(markers[i])\r\n\r\n          let newMarker = <Marker\r\n            position={markers[i].location}\r\n            onClick={this.onMarkerClick}\r\n            title={this.capitalize_Words(markers[i].restaurant)}\r\n            name={this.capitalize_Words(markers[i].recipe)}\r\n            key={i}\r\n          />\r\n          recipiMarkers.push(newMarker)\r\n        }\r\n        this.setState({ recipiMarkers: recipiMarkers })\r\n\r\n      })\r\n  }\r\n  capitalize_Words(str) {\r\n    return str.replace(/\\w\\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });\r\n  }\r\n  onMarkerClick = (props, marker, e) => {\r\n    console.dir(marker)\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n  }\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n  //because event handlers in dynamic infowindow content cannot work properly, render React content to element within InfoWindow by id\r\n  onInfoWindowOpen(props, e) {\r\n    const content = (<div><h3><span onClick={() => { this.props.loadRecipeFromMap(this.state.selectedPlace.name, this.props.oldSelf) }} style={{ cursor: \"pointer\" }}>{this.state.selectedPlace.name} from {this.state.selectedPlace.title}</span></h3>\r\n      <p>Click the dish to be taken to its Recipi!</p></div>)\r\n    ReactDOM.render(React.Children.only(content), document.getElementById(\"currentInfo\"))\r\n  }\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return <div>Loading ... </div>\r\n    }\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={12}\r\n        style={mapStyles}\r\n        initialCenter={this.state.userLocation}\r\n      >\r\n        {this.state.recipiMarkers}\r\n        <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showingInfoWindow}\r\n          onClose={this.onClose}\r\n          onOpen={e => {\r\n            this.onInfoWindowOpen(this.props, e);\r\n          }}\r\n        >\r\n          <div id=\"currentInfo\">\r\n          </div>\r\n        </InfoWindow>\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyClOhMinsJlKmviBdX43_mVHtn4Uk7qb6k'\r\n})(MapContainer);","import React from 'react';\r\nimport { Col } from 'react-bootstrap';\r\n\r\nlet changeRating = (title, index, plus, self) => {\r\n    let change = \"minus\"\r\n    if (plus) {\r\n        change = \"plus\"\r\n    }\r\n    //confirm user did note already vote\r\n    fetch('/api/user/didvote', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: self.state.userData,\r\n            recipeTitle: title,\r\n            token: self.state.token\r\n        }),\r\n    }).then(res => res.json())\r\n        .then(json => {\r\n            if (json.success) {\r\n                //if vote is valid, post change\r\n                fetch(`/api/recipes/${change}rating`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        title: title,\r\n                        token: self.state.token\r\n                    }),\r\n                }).then((res) => { return res.json() }).then((json) => {\r\n                    if (json.success) {\r\n                        //once change is posted, replace recipe item in state array with updated recipe\r\n                        let newRecipe = {}\r\n                        fetch('/api/recipes/find', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            body: JSON.stringify({\r\n                                title: title,\r\n                                token: self.state.token\r\n                            }),\r\n                        }).then((res) => {\r\n                            return res.json()\r\n                        }).then((result) => {\r\n                            newRecipe = result[0]\r\n                            let newRecipeArray = [...self.state.recipes]\r\n                            let ratingButtons = <div><p style={{ paddingTop: \"8px\" }}>Already voted! - <span style={{ fontWeight: \"bold\" }}>Rating: {newRecipe.rating} </span></p></div>\r\n                            newRecipeArray[index] = <Col key={index} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <img onClick={() => { self.showDesc(newRecipe, ratingButtons, false, self) }} src={newRecipe.image} id=\"imgClick\" className=\"img-fluid shadow p-1 mb-3 rounded recImg\" ></img><p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(newRecipe.title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {newRecipe.user} </span><br></br> {self.jsUcfirst(newRecipe.description)}</p>{ratingButtons}<br></br></div></Col>\r\n                            self.setState({ recipes: newRecipeArray })\r\n\r\n                            //if page is currently displayed a recipe description, refresh the component to display new rating properly\r\n                            if (self.state.recipeDescription) {\r\n                                self.setState({ recipeDescription: \"\" })\r\n                                //send the detailed description page a special goBack function, to fully reload page recipes (avoids duplicate recipe error)\r\n                                let refreshPage = () => {\r\n                                    self.loadRecipes(self)\r\n                                    self.setState({ recipeDescription: \"\" })\r\n                                }\r\n                                self.showDesc(newRecipe, ratingButtons, refreshPage, self)\r\n                            }\r\n                            //if there is currently a search term filtering results, refresh the filtering to display new rating properly\r\n                            if (self.state.searchTerm) {\r\n                                self.handleSearch()\r\n                            }\r\n                            //if user is currently viewing their own recipes, refresh the list to update rankings properly\r\n                            if (self.state.showMyRecipes) {\r\n                                self.loadRecipes(self)\r\n                            }\r\n\r\n                        })\r\n                    }\r\n                }\r\n                )\r\n            } else {\r\n                alert(\"already voted!\")\r\n            }\r\n        });\r\n}\r\n\r\nexport default changeRating","import React from 'react';\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\n\r\nclass RecipeDescription extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ratingButtons: this.props.ratingButtons,\r\n            title: this.props.title,\r\n            user: this.props.user,\r\n            commentText: \"\",\r\n            token: this.props.token,\r\n            comments: [],\r\n            commentSubmit: false\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        this.loadComments()\r\n        if (this.props.isLoggedIn) {\r\n            this.setState({commentSubmit: true})\r\n        }\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ commentText: e.target.value })\r\n    }\r\n    loadComments = () => {\r\n        return fetch('/api/comments', {\r\n            method: 'GET',\r\n            headers: {\r\n                'recipe': this.state.title\r\n            },\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                let newComments = json.map((comment, index) => {\r\n                    return <div key={index} style={{ border: \"1px solid #6EC2F0\", margin: \"2px\", padding: \"10px\", borderRadius: \"10px\" }}><p><span style={{ fontWeight: \"bold\" }}>{comment.user}</span> - <span opacity={0.5}>{comment.date}</span></p><p>{comment.comment}</p></div>\r\n                })\r\n                this.setState({ comments: newComments.reverse() })\r\n            })\r\n\r\n    }\r\n    handleCommentSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.setState({ commentText: \"\" })\r\n        if (!this.state.commentText) {\r\n            alert(\"Comment cannot be blank!\")\r\n            return \"error\"\r\n        }\r\n        const {\r\n            title,\r\n            commentText,\r\n            token\r\n        } = this.state;\r\n        if (!token) {\r\n            alert(\"log in to post comments!\")\r\n            return\r\n        }\r\n        let user = this.props.currentUser\r\n        fetch('/api/comments', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                recipe: title,\r\n                user: user,\r\n                comment: commentText,\r\n                token: token\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n            }).then(() => { this.loadComments() });\r\n\r\n    }\r\n    render() {\r\n        let comForm = <h3>Please log in to submit comments!</h3>\r\n        if (this.state.commentSubmit) {\r\n            comForm = \r\n            <Form\r\n            onSubmit={this.handleCommentSubmit}>\r\n                <h3>Leave a comment below!</h3>\r\n                <Form.Group controlId=\"commentInput\">\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        rows=\"3\"\r\n                        placeholder=\"Enter comment ...\"\r\n                        value={this.state.commentText}\r\n                        onChange={this.handleChange} />\r\n                </Form.Group>\r\n                <Button\r\n                    block\r\n                    type=\"submit\"\r\n                    variant=\"info\"\r\n                >\r\n                    Submit!\r\n                    </Button>\r\n            </Form>\r\n        }\r\n        return <Container>\r\n            <br></br>\r\n            <Button variant=\"info\" onClick={this.props.goBack}>Go Back</Button>\r\n            <h1>{this.state.title}</h1> <p>by {this.state.user}</p>\r\n            <img className=\"img-fluid shadow-lg p-2 mb-3 rounded\" style={{ \"maxHeight\": 550 }} src={this.props.imgSrc}></img>\r\n            {this.state.ratingButtons} <p style={{ margin: \"2px\", padding: \"5px\" }} >{this.props.longDesc}</p>\r\n            <div style={{ border: \"2px solid #6EC2F0\", margin: \"2px\", padding: \"5px\", borderRadius: \"5px\", backgroundColor: \"#f5fcff\" }}><br></br>{this.props.elements}<br></br><p>{this.props.instructions}</p></div>\r\n            <br></br>\r\n            {comForm}\r\n            <br></br>\r\n            {this.state.comments}\r\n\r\n\r\n        </Container>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default RecipeDescription","import React from 'react';\r\nimport RecipeDescription from \"../RecipeDescription\"\r\n\r\n//render a description page for selected recipe\r\nlet showDesc = (recipe, ratingButtons, altGoBack, self) => {\r\n    let arrayOfElements = []\r\n    for (let i = 0; i < recipe.ingredients.length; i++) {\r\n        arrayOfElements.push(<div>{`\\u2022`} {recipe.ingredients[i]}<br></br></div>)\r\n    }\r\n    let goBack = () => { self.setState({ recipeDescription: \"\" }) }\r\n    // if given, pass on a different goBack method for the description page\r\n    if (altGoBack) {\r\n        goBack = altGoBack\r\n    }\r\n    let newComponent = <RecipeDescription token={self.state.token} isLoggedIn={self.state.isLoggedIn} currentUser={self.state.userData} ratingButtons={ratingButtons} title={self.capitalize_Words(recipe.title)} user={recipe.user} imgSrc={recipe.image} elements={arrayOfElements} longDesc={recipe.longDescription} instructions={recipe.instructions} goBack={goBack} />\r\n    self.setState({ recipeDescription: newComponent })\r\n    window.scrollTo(0, 0)\r\n}\r\n\r\nexport default showDesc","import React from 'react';\r\nimport { Col, Button } from 'react-bootstrap';\r\n\r\n\r\n//load all recipes from server, sorting by rating, and adding current user's recipes to myRecipes array\r\nlet loadRecipes = (self) => {\r\n    self.setState({ isLoading: true })\r\n    if (self.state.isLoggedIn) {\r\n        return fetch('/api/recipes', {\r\n            method: 'GET',\r\n            headers: {\r\n                'token': self.state.token\r\n            },\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                let allRecipes = []\r\n                let myRecipes = []\r\n                //sort by rating in descending order\r\n                json.sort(function (a, b) {\r\n                    return b.rating - a.rating\r\n                })\r\n                //check if current user voted already on each recipe\r\n                for (let i = 0; i < json.length; i++) {\r\n                    let recipeItem = fetch('/api/user/didvote', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            user: self.state.userData,\r\n                            recipeTitle: json[i].title,\r\n                            dontChange: true,\r\n                            token: self.state.token\r\n                        }),\r\n                    }).then(res => res.json())\r\n                        .then(goodJson => {\r\n                            let ratingButtons = \"\"\r\n                            //depending on whether or not current user has voted on a recipi, display either vote buttons or an \"Already voted\" message next to the current rating\r\n                            if (goodJson.success) {\r\n                                ratingButtons = <div><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { self.changeRating(json[i].title, i, true, self) }}>\t+ </Button><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { self.changeRating(json[i].title, i, false, self) }}> - </Button> -<span style={{ fontWeight: \"bold\" }}> Rating: {json[i].rating} </span></div>\r\n                            } else {\r\n                                ratingButtons = <div><p style={{ paddingTop: \"8px\" }}>Already voted! - <span style={{ fontWeight: \"bold\" }}>Rating: {json[i].rating} </span></p></div>\r\n                            }\r\n                            let recipeTitleByIndex = self.state.recipeTitleByIndex\r\n                            recipeTitleByIndex[i] = json[i].title\r\n                            self.setState({ recipeTitleByIndex: recipeTitleByIndex })\r\n\r\n                            // if current user is the author of a recipe, add it to their own array\r\n                            if (self.state.userData === json[i].user) {\r\n                                myRecipes.push(<Col key={i} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <img onClick={() => { self.showDesc(json[i], ratingButtons, false, self) }} src={json[i].image} id=\"imgClick\" className=\"img-fluid shadow p-1 mb-3 rounded recImg\" ></img><p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {self.jsUcfirst(json[i].description)}</p>{ratingButtons}<br></br></div></Col>)\r\n                            }\r\n\r\n                            return <Col key={i} xs=\"6\" sm=\"4\" ><div style={{ textAlign: \"left\", maxWidth: \"100%\" }}>    <img onClick={() => { self.showDesc(json[i], ratingButtons, false, self) }} src={json[i].image} id=\"imgClick\" className=\"img-fluid shadow p-1 mb-3 rounded recImg\" ></img><p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {self.jsUcfirst(json[i].description)}</p>{ratingButtons}<br></br></div></Col>\r\n                        })\r\n                    allRecipes.push(recipeItem)\r\n                }\r\n                Promise.all(allRecipes).then((allRecipes) => {\r\n                    if (!myRecipes[0]) {\r\n                        myRecipes.push(<h3>Nothing to show!</h3>)\r\n                    }\r\n                    self.setState({ recipes: allRecipes, myRecipes: myRecipes, isLoading: false })\r\n                })\r\n            }) \r\n    } else {\r\n        //if user is not logged in, present recipes without rating buttons\r\n        return fetch('/api/recipes', {\r\n            method: 'GET',\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                let allRecipes = []\r\n                //sort by rating in descending order\r\n                json.sort(function (a, b) {\r\n                    return b.rating - a.rating\r\n                })\r\n                //check if current user voted already on each recipe\r\n                let ratingButtons = \"\"\r\n                for (let i = 0; i < json.length; i++) {\r\n                    ratingButtons = <p>Rating: {json[i].rating}</p>\r\n                    let recipeTitleByIndex = self.state.recipeTitleByIndex\r\n                    recipeTitleByIndex[i] = json[i].title\r\n                    self.setState({ recipeTitleByIndex: recipeTitleByIndex })\r\n                    let recipeItem = <Col key={i} xs=\"6\" sm=\"4\" ><div style={{ textAlign: \"left\", maxWidth: \"100%\" }}>    <img onClick={() => { self.showDesc(json[i], ratingButtons, false, self) }} src={json[i].image} id=\"imgClick\" className=\"img-fluid shadow p-1 mb-3 rounded recImg\" ></img><p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {self.jsUcfirst(json[i].description)}</p>{ratingButtons}<br></br></div></Col>\r\n                    allRecipes.push(recipeItem)\r\n                    console.log(\"this is loading: \"+json[i].title)\r\n                }\r\n                Promise.all(allRecipes).then((allRecipes) => {\r\n                    self.setState({ recipes: allRecipes, isLoading: false })\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport default loadRecipes","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nlet loadRandomRecipe = (self) => {\r\n    self.setState({ isLoading: true })\r\n    let i = Math.floor(Math.random() * self.state.recipes.length)\r\n    if (self.state.isLoggedIn) {\r\n        fetch('/api/recipes', {\r\n            method: 'GET',\r\n            headers: {\r\n                'token': self.state.token\r\n            },\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                fetch('/api/user/didvote', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        user: self.state.userData,\r\n                        recipeTitle: json[i].title,\r\n                        dontChange: true,\r\n                        token: self.state.token\r\n                    }),\r\n                }).then(res => res.json())\r\n                    .then(goodJson => {\r\n                        let ratingButtons = \"\"\r\n                        if (goodJson.success) {\r\n                            ratingButtons = <div><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { self.changeRating(json[i].title, i, true, self) }}>\t+ </Button><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { self.changeRating(json[i].title, i, false, self) }}> - </Button> <p style={{ fontWeight: \"bold\" }}>Rating: {json[i].rating} </p></div>\r\n                        } else {\r\n                            ratingButtons = <div><p style={{ paddingTop: \"8px\" }}>Already voted!</p> <p style={{ fontWeight: \"bold\" }}>Rating: {json[i].rating} </p></div>\r\n                        }\r\n                        self.showDesc(json[i], ratingButtons, false, self)\r\n                        self.setState({ isLoading: false })\r\n                    })\r\n            })\r\n        } else {\r\n            //present guest description page if user not logged in\r\n            fetch('/api/recipes', {\r\n                method: 'GET',\r\n            })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                let ratingButtons = <p>Rating: {json[i].rating}</p>\r\n                self.showDesc(json[i], ratingButtons, false, self)\r\n                self.setState({ isLoading: false })\r\n            })\r\n        }\r\n}\r\n\r\nexport default loadRandomRecipe","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n// load a recipe from a marker on the map component\r\nlet loadRecipeFromMap = (recipe, self) => {\r\n    recipe = recipe.toLowerCase()\r\n    self.setState({ showMap: false, isLoading: true })\r\n    if (self.state.isLoggedIn) {\r\n        fetch('/api/recipes/find', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                token: self.state.token,\r\n                title: recipe\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                fetch('/api/user/didvote', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        user: self.state.userData,\r\n                        recipeTitle: recipe,\r\n                        dontChange: true,\r\n                        token: self.state.token\r\n                    }),\r\n                }).then(res => res.json())\r\n                    .then(goodJson => {\r\n                        let ratingButtons = \"\"\r\n                        if (!json[0]) {\r\n                            //if the server cannot find a recipe with matching name, bring user back to the map\r\n                            alert(\"Recipi not found!\")\r\n                            self.setState({ isLoading: false })\r\n                            self.setState({ showMap: true })\r\n                            return\r\n                        }\r\n                        if (goodJson.success) {\r\n                            ratingButtons = <div ><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { self.changeRating(json[0].title, 0, true, self) }}>\t+ </Button><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { self.changeRating(json[0].title, 0, false, self) }}> - </Button> <p style={{ fontWeight: \"bold\" }}>Rating: {json[0].rating} </p></div>\r\n                        } else {\r\n                            ratingButtons = <div><p style={{ paddingTop: \"8px\" }}>Already voted!</p> <p style={{ fontWeight: \"bold\" }}>Rating: {json[0].rating} </p></div>\r\n                        }\r\n                        self.showDesc(json[0], ratingButtons, false, self)\r\n                        self.setState({ isLoading: false })\r\n                    })\r\n            })\r\n    } else {\r\n        //present guest description page if user not logged in\r\n        fetch('/api/recipes/find', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                title: recipe\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                let ratingButtons = <p>Rating: {json[0].rating}</p>\r\n                if (!json[0]) {\r\n                    //if the server cannot find a recipe with matching name, bring user back to the map\r\n                    alert(\"Recipi not found!\")\r\n                    self.setState({ isLoading: false })\r\n                    self.setState({ showMap: true })\r\n                    return\r\n                }\r\n                self.showDesc(json[0], ratingButtons, false, self)\r\n                self.setState({ isLoading: false })\r\n            })\r\n    }\r\n}\r\nexport default loadRecipeFromMap","import React from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Container, Row, Form, Button } from 'react-bootstrap';\r\nimport PostRecipe from './PostRecipe'\r\nimport Map from \"./Map\"\r\nimport ChangeRating from \"./methods/ChangeRating\"\r\nimport ShowDesc from \"./methods/ShowDesc\"\r\nimport LoadRecipes from \"./methods/LoadRecipes\"\r\nimport LoadRandomRecipe from \"./methods/LoadRandomRecipe\"\r\nimport LoadRecipeFromMap from \"./methods/LoadRecipeFromMap\"\r\n\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      token: this.props.token,\r\n      isLoggedIn: false,\r\n      userData: \"\",\r\n      recipes: [],\r\n      logout: false,\r\n      isLoading: true,\r\n      inputRecipe: \"\",\r\n      recipeDescription: \"\",\r\n      searchTerm: \"\",\r\n      recipeTitleByIndex: [],\r\n      filtRecipes: [],\r\n      myRecipes: [<h3>Nothing to show!</h3>],\r\n      showMyRecipes: false,\r\n      toggleMyRecipesText: \"Show My Recipis\",\r\n      showMap: false,\r\n      redirectLogin: false\r\n    }\r\n    this.goLogin = this.goLogin.bind(this)\r\n    this.goBack = this.goBack.bind(this);\r\n    this.showInput = this.showInput.bind(this);\r\n    this.changeRating = ChangeRating.bind(this);\r\n    this.showDesc = ShowDesc.bind(this)\r\n    this.loadRecipes = LoadRecipes.bind(this)\r\n    this.loadRandomRecipe = LoadRandomRecipe.bind(this);\r\n    this.toggleMyRecipes = this.toggleMyRecipes.bind(this);\r\n    this.toggleMap = this.toggleMap.bind(this);\r\n    this.loadRecipeFromMap = LoadRecipeFromMap.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //verify token\r\n    this.setState({ isLoading: true })\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            isLoggedIn: true,\r\n            userData: json.userData.userName,\r\n            isLoading: false\r\n          });\r\n          this.loadRecipes(this)\r\n        } else {\r\n          //if token is not present or invalid, load user as Guest\r\n          this.setState({\r\n            isLoggedIn: false,\r\n            userData: \"Guest\",\r\n            isLoading: false\r\n          });\r\n          this.loadRecipes(this)\r\n        }\r\n      });\r\n\r\n  }\r\n  // use a new search term being entered to filter which recipes are displayed\r\n  handleSearch = (event) => {\r\n    let newSearch = \"\"\r\n    if (event) {\r\n      newSearch = event.target.value\r\n      this.setState({\r\n        searchTerm: newSearch\r\n      });\r\n    } else {\r\n      //if this method is being called from a context without any event, continue using existing search term\r\n      newSearch = this.state.searchTerm\r\n    }\r\n\r\n    //convert search term to lowercase\r\n    let lcSearch = newSearch.toLowerCase()\r\n    let allRecipes = this.state.recipes\r\n    //map over all recipes\r\n    let newFiltRecipes = allRecipes.map((recipe) => {\r\n      let compareTitle = this.state.recipeTitleByIndex[recipe.key]\r\n      //if title of recipe includes the search term, return it to the new filtered array\r\n      if (compareTitle.includes(lcSearch)) {\r\n        return recipe\r\n      } else {\r\n        return <div></div>\r\n      }\r\n    })\r\n    this.setState({ filtRecipes: newFiltRecipes })\r\n  }\r\n  //method capitalizes first letter of all words, used for titles etc.\r\n  capitalize_Words(str) {\r\n    return str.replace(/\\w\\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });\r\n  }\r\n  //method capitalizes only the first letter in a string, used for descriptions etc.\r\n  jsUcfirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n  }\r\n  //function to pass into other components props, used to return to main page\r\n  goBack(doRefresh) {\r\n    if (doRefresh) {\r\n      this.loadRecipes(this)\r\n    }\r\n    this.setState({ inputRecipe: \"\" })\r\n  }\r\n  //allows user to toggle only their submitted recipes\r\n  toggleMyRecipes() {\r\n    if (this.state.showMyRecipes) {\r\n      this.setState({ showMyRecipes: false, toggleMyRecipesText: \"Show My Recipis\" })\r\n    } else {\r\n      this.setState({ showMyRecipes: true, toggleMyRecipesText: \"Show All Recipis\" })\r\n    }\r\n  }\r\n  //toggles Google Map feature on or off\r\n  toggleMap() {\r\n    if (this.state.showMap) {\r\n      this.setState({ showMap: false })\r\n    } else {\r\n      this.setState({ showMap: true })\r\n    }\r\n  }\r\n  //method renders an input form for new recipes\r\n  showInput() {\r\n    this.setState({ inputRecipe: true })\r\n  }\r\n  //logs user out of current session\r\n  logout(token) {\r\n    this.setState({ isLoading: true })\r\n    //NOW STATELESS - simply clear token from client-side\r\n    this.props.saveToken(\"\")\r\n    this.setState({ logout: true, isLoggedIn: false, isLoading: false })\r\n\r\n  }\r\n  //relocate user to login/registration page\r\n  goLogin() {\r\n    this.setState({ redirectLogin: true})\r\n  }\r\n  \r\n  render() {\r\n    //if content is loading, display Loading ... screen\r\n    if (this.state.isLoading) {\r\n      return <Container style={{ height: \"900px\" }}> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n    }\r\n    //if a description exists in state, display that component\r\n    if (this.state.recipeDescription) {\r\n      return this.state.recipeDescription\r\n    }\r\n    //after logging out of session, return to entry page\r\n    if (this.state.logout) {\r\n      return <Redirect to='/' />\r\n    }\r\n    //if users clicks login/registration, redirect them appropriately\r\n    if (this.state.redirectLogin) {\r\n      return <Redirect to='/login' />\r\n    }\r\n    //if inputform is true in state, display that component\r\n    if (this.state.inputRecipe) {\r\n      return <Container><div className=\"row align-items-center justify-content-center\"><PostRecipe user={this.state.userData} token={this.state.token} goBack={this.goBack} /></div></Container>\r\n    }\r\n    //render map if toggled on\r\n    if (this.state.showMap) {\r\n      return <div className=\"text-center\" style={{ height: \"900px\", margin: \"0px\" }}><Button className=\"btn\" style={{ margin: \"5px\" }} variant=\"info\" onClick={this.toggleMap}>Toggle Map</Button><br></br><Map loadRecipeFromMap={this.loadRecipeFromMap} oldSelf={this} token={this.state.token} /></div>\r\n    }\r\n    //check for token\r\n    if (this.state.token && this.state.isLoggedIn) {\r\n      //if token is valid and user successfully authenticates, display main recipes page for user\r\n      let displayedRecipes = \"\"\r\n      //if there is currently a non-empty search term string, only display filtered recipes\r\n      if (this.state.searchTerm !== \"\") {\r\n        displayedRecipes = <Row>{this.state.filtRecipes}</Row>\r\n      } else {\r\n        displayedRecipes = <Row>{this.state.recipes}</Row>\r\n      }\r\n      if (this.state.showMyRecipes) {\r\n        displayedRecipes = <Row>{this.state.myRecipes}</Row>\r\n      }\r\n      return (\r\n        <div>\r\n          <Container>\r\n            <h3 className=\"text-center\"> Welcome {this.state.userData}, check out these Recipis!</h3>\r\n            <Form onSubmit={(e) => { e.preventDefault() }}>\r\n              <Form.Group controlId=\"formSearchTerms\">\r\n                <Form.Control\r\n                  value={this.state.searchTerm}\r\n                  onChange={this.handleSearch}\r\n                  type=\"search\"\r\n                  placeholder=\"Search Recipi titles ...\" />\r\n              </Form.Group>\r\n            </Form>\r\n            <br></br>\r\n\r\n            <div className=\"text-center\">\r\n              <Button className=\"btn\" style={{ margin: \"3px\" }} variant=\"info\" onClick={this.showInput}>Post a Recipi</Button>\r\n              <Button className=\"btn\" style={{ margin: \"3px\" }} variant=\"info\" onClick={this.toggleMyRecipes}>{this.state.toggleMyRecipesText}</Button>\r\n              <Button className=\"btn\" style={{ margin: \"3px\" }} variant=\"info\" onClick={this.toggleMap}>Toggle Map</Button>\r\n              <Button className=\"btn\" style={{ margin: \"3px\" }} variant=\"info\" onClick={() => { this.loadRandomRecipe(this) }}>Choose For Me</Button>\r\n            </div>\r\n            <br></br>\r\n\r\n            {displayedRecipes}\r\n            <br></br>\r\n\r\n            <div className=\"text-center\">\r\n              <Button className=\"btn\" variant=\"secondary\" onClick={() => { this.logout(this.state.token) }}>Logout</Button>\r\n            </div>\r\n          </Container>\r\n        </div>)\r\n        //if token is invalid, present guest page\r\n    \r\n    }\r\n    //if no token exists to authenticate or user is not logged in, present guest page\r\n    else if (!this.state.token || !this.state.isLoggedIn) {\r\n      let displayedRecipes = \"\"\r\n        //if there is currently a non-empty search term string, only display filtered recipes\r\n        if (this.state.searchTerm !== \"\") {\r\n          displayedRecipes = <Row>{this.state.filtRecipes}</Row>\r\n        } else {\r\n          displayedRecipes = <Row>{this.state.recipes}</Row>\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            <Container>\r\n              <h3 className=\"text-center\"> Welcome {this.state.userData}, check out these Recipis!</h3>\r\n              <Form onSubmit={(e) => { e.preventDefault() }}>\r\n                <Form.Group controlId=\"formSearchTerms\">\r\n                  <Form.Control\r\n                    value={this.state.searchTerm}\r\n                    onChange={this.handleSearch}\r\n                    type=\"search\"\r\n                    placeholder=\"Search Recipi titles ...\" />\r\n                </Form.Group>\r\n              </Form>\r\n              <br></br>\r\n\r\n              <div className=\"text-center\">\r\n                <Button className=\"btn\" style={{ margin: \"3px\" }} variant=\"info\" onClick={this.goLogin}>Login/Register</Button>\r\n                <Button className=\"btn\" style={{ margin: \"3px\" }} variant=\"info\" onClick={this.toggleMap}>Toggle Map</Button>\r\n                <Button className=\"btn\" style={{ margin: \"3px\" }} variant=\"info\" onClick={() => { this.loadRandomRecipe(this) }}>Choose For Me</Button>\r\n              </div>\r\n              <br></br>\r\n\r\n              {displayedRecipes}\r\n              <br></br>\r\n            </Container>\r\n          </div>)\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from \"react\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport LoginForm from './components/LoginForm'\nimport Home from './components/Home'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      token: \"\"\n    };\n    this.saveToken = this.saveToken.bind(this);\n  }\n  componentDidMount() {\n    document.title = \"Recipi\"\n\n    //check if there exists a token in localStorage already, and if so, try to verify it\n    if (this.state.token === \"\" && localStorage.getItem('tokenItem')) {\n      //start by saving localStorage token to state\n      var newToken = localStorage.getItem('tokenItem');\n      this.setState({ token: newToken })\n    } else if (this.state.token) {\n      fetch('/api/account/verify', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'token': this.state.token\n        }\n      }).then(res => res.json())\n        .then(json => {\n          if (json.success) {\n            //if token is valid, continue using it\n            console.log(\"token is valid\")\n          } else {\n            //otherwise, clear local storage and state \n            this.saveToken(\"\")\n          }\n        });\n    }\n  }\n  saveToken(token) {\n    console.log(\"saveToken is called with token: \"+token)\n    localStorage.setItem('tokenItem', token)\n    this.setState({ token: token })\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header id=\"headerClick\" style={{ backgroundColor: \"#6dc4ed\" }}>\n            <h1 onClick={()=>{\n                window.location.href = '/'\n              }} className=\"Recipi\"> Recipi </h1>\n          </header>\n          <body style={{ backgroundColor: \"#e6f5fc\", color: \"#1c7fad\", fontFamily: \"Quicksand\" }}>\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/home\"/>\n            )} />\n            <Route exact path=\"/login\" render={(routeProps) => (\n              <LoginForm {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <Route exact path=\"/home\" render={(routeProps) => (\n              <Home {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <br></br>\n          </body>\n          <footer style={{ backgroundColor: \"#6dc4ed\" }}>Website built by Nicolai Antonov, 2019</footer>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}