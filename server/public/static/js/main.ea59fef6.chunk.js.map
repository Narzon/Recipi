{"version":3,"sources":["components/LoginForm.js","components/RecipeDescription.js","components/PostRecipe.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","register","registerForm","backToLogin","handleLogin","isLoading","preventDefault","_this$state","state","email","password","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","success","saveToken","token","localStorage","setItem","toHome","signUpError","message","alert","handleSubmit","_this$state2","username","validSession","length","_this2","react_default","a","createElement","react_router","to","Container","className","onSubmit","FormGroup","controlId","bsSize","FormLabel","FormControl","autoFocus","type","onChange","Button","block","disabled","validateForm","onClick","Component","RecipeDescription","title","user","src","imgSrc","elements","longDesc","instructions","goBack","PostRecipe","shortDesc","ingredients","imageURL","ingredientsArray","replace","split","map","item","toUpperCase","slice","description","longDescription","image","React","Home","isLoggedIn","userData","recipes","logout","inputRecipe","recipeDescription","bind","assertThisInitialized","showInput","loadRecipes","plusRating","userName","str","txt","charAt","substr","toLowerCase","components_PostRecipe","string","index","self","recipeTitle","newRecipe","result","newRecipeArray","toConsumableArray","Col","key","xs","sm","style","textAlign","fontWeight","capitalize_Words","fontStyle","jsUcfirst","showDesc","rating","_this3","allRecipes","sort","b","_loop","i","recipeItem","dontChange","goodJson","border","variant","minusRating","push","Promise","all","recipe","arrayOfElements","newComponent","components_RecipeDescription","_this4","_this5","Row","App","document","getItem","newToken","console","log","react_router_dom","backgroundColor","window","location","href","color","exact","path","render","routeProps","components_LoginForm","assign","components_Home","Boolean","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea59fef6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      username: \"\",\r\n      isLoading: true,\r\n      signUpError: \"\",\r\n      registerForm: false,\r\n      token: this.props.token,\r\n      validSession: false,\r\n      toHome: false\r\n    };\r\n  }\r\n\r\n  //make sure user has provided both inputs\r\n  validateForm() {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n  //methods handle whether or not to render the registration form\r\n  register = event => {\r\n    this.setState({ registerForm: true })\r\n  }\r\n  backToLogin = event => {\r\n    this.setState({ registerForm: false })\r\n  }\r\n  //attempt to login\r\n  handleLogin = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n    } = this.state;\r\n    fetch('/api/account/signin', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if server cannot authenticate, alert user\r\n        if (!json.success) {\r\n          this.setState({\r\n            signUpError: json.message\r\n          })\r\n          alert(\"invalid login\")\r\n        ///otherwise, save token to state and localstorage and attempt to send user to home\r\n        } else {\r\n          this.props.saveToken(json.token)\r\n          localStorage.setItem('tokenItem', json.token);\r\n          this.setState({ toHome: true, isLoading: false })\r\n        }\r\n\r\n      });\r\n  }\r\n  //attempt to register new user\r\n  handleSubmit = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n      username\r\n    } = this.state;\r\n    fetch('/api/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        username: username\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if registration is successful, alert user to success and return to login\r\n        if (json.success) {\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n            email: '',\r\n            password: '',\r\n            username: ''\r\n          });\r\n          this.setState({ registerForm: false })\r\n        } else {\r\n        //if registration is unsuccessful (doe to username or email being taken already), alert use to try again\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n          });\r\n          alert(\"Username or email taken! Try again.\")\r\n        }\r\n      });\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true })\r\n    //on mounting, attempt to validate any current token in state\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            validSession: true\r\n          });\r\n        } else {\r\n          this.setState({\r\n            validSession: false\r\n          });\r\n        }\r\n        this.setState({ isLoading: false })\r\n      });\r\n    \r\n  }\r\n  render() {\r\n    //if successful login is indicated, return to entrypage with new token\r\n    if (this.state.toHome) {\r\n      return <Redirect to='/home' />\r\n    }\r\n    //display Loading ... if appropriate\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <Container> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n      )\r\n    }\r\n    //if it exists in state, render a registration form instead of login\r\n    if (this.state.registerForm) {\r\n      return (\r\n        <Container>\r\n          <div className=\"Login\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"username\" bsSize=\"large\">\r\n                <FormLabel>Username  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.username}\r\n                  onChange={this.handleChange}\r\n                  type=\"username\"\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n            </Button>\r\n              <br></br>\r\n              <Button\r\n                block\r\n                bsSize=\"small\"\r\n                type=\"submit\"\r\n                onClick={this.backToLogin}\r\n              >\r\n                Go Back\r\n            </Button>\r\n\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n    //if there is no token currently in state, or if there is a token that fails authentication, render the login form\r\n    if (!this.state.token || this.state.validSession === false) {\r\n      return (\r\n        <Container>\r\n          <div>\r\n            <p>Login in here: </p>\r\n            <form onSubmit={this.handleLogin}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n              >\r\n                Login\r\n                </Button>\r\n\r\n            </form>\r\n            <br></br>\r\n\r\n\r\n            <Button\r\n              block\r\n              bsSize=\"large\"\r\n              type=\"button\"\r\n              onClick={this.register}>\r\n              Register\r\n          </Button>\r\n          </div>\r\n        </Container>\r\n      )\r\n    }\r\n    //by default, send user to home (assumes authentication has not failed)\r\n    return (\r\n      <div>\r\n        <p>Signed in</p>\r\n        <div><Redirect to=\"/home\" /></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport { Button, Container } from \"react-bootstrap\";\r\n\r\nlet RecipeDescription = (props) => {\r\n    return <Container><h1>{props.title}</h1> <p>by {props.user}</p> <img className=\"img-fluid\" src={props.imgSrc}></img> {props.elements} <br></br> <p>{props.longDesc}</p><p>{props.instructions}</p><br></br><Button onClick={props.goBack}>Go Back</Button></Container>\r\n}\r\n\r\n\r\n\r\nexport default RecipeDescription","import React from 'react';\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\n\r\nclass PostRecipe extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: \"\",\r\n            shortDesc: \"\",\r\n            longDesc: \"\",\r\n            ingredients: [],\r\n            instructions: \"\",\r\n            imageURL: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //this.props.user\r\n\r\n    }\r\n    //post input data as new recipe to server\r\n    handleSubmit = event => {\r\n        this.setState({isLoading: true})\r\n        event.preventDefault();\r\n        const {\r\n            title,\r\n            shortDesc,\r\n            longDesc,\r\n            ingredients,\r\n            instructions,\r\n            imageURL\r\n        } = this.state;\r\n        let ingredientsArray = ingredients.replace(/\\s*,\\s*/g, \",\").split(',')\r\n        ingredientsArray = ingredientsArray.map((item)=>{\r\n            let newItem= \"\"+item[0].toUpperCase()+item.slice(1)\r\n            return newItem\r\n        })\r\n        fetch('/api/recipes', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user: this.props.user,\r\n                title: title,\r\n                description: shortDesc,\r\n                longDescription: longDesc,\r\n                ingredients: ingredientsArray,\r\n                instructions: instructions,\r\n                image: imageURL\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n            //upon successful posting, go back\r\n            if (json.success) {\r\n                alert(\"Recipi saved!\")\r\n                this.props.goBack()\r\n            } else {\r\n                //else, alert user of error and remain on page\r\n                alert(\"Failed! Server error.\")\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n        [event.target.id]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        //render an input form for a new recipe\r\n        return (<div className=\"col\">\r\n        <h2 className=\"text-center\">Here's your form, {this.props.user}</h2>\r\n            <form onSubmit={this.handleSubmit}>\r\n                <FormGroup controlId=\"title\" bsSize=\"large\">\r\n                    <FormLabel>Recipi Title  </FormLabel>\r\n                    <FormControl\r\n                    autoFocus\r\n                    type=\"title\"\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"shortDesc\" bsSize=\"large\">\r\n                    <FormLabel>A short summay  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.shortDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"shortDesc\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"longDesc\" bsSize=\"large\">\r\n                    <FormLabel>A longer description  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.longDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"longDesc\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"instructions\" bsSize=\"large\">\r\n                    <FormLabel>Recipi instructions  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.instructions}\r\n                    onChange={this.handleChange}\r\n                    type=\"instructions\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"ingredients\" bsSize=\"large\">\r\n                    <FormLabel>Ingredients  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.ingredients}\r\n                    onChange={this.handleChange}\r\n                    type=\"ingredients\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"imageURL\" bsSize=\"large\">\r\n                    <FormLabel>Image URL  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.imageURL}\r\n                    onChange={this.handleChange}\r\n                    type=\"imageURL\"\r\n                    />\r\n                </FormGroup>\r\n                <Button\r\n                    block\r\n                    bsSize=\"large\"\r\n                    type=\"submit\"\r\n                >\r\n                    Submit your Recipi!\r\n                </Button>\r\n                <br></br>\r\n                <Button onClick={this.props.goBack}>Go back</Button>\r\n            </form>\r\n        </div>)\r\n    }\r\n    }\r\n\r\n    export default PostRecipe","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Button } from \"react-bootstrap\";\r\nimport RecipeDescription from \"./RecipeDescription\"\r\nimport PostRecipe from './PostRecipe'\r\n\r\n\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      token: this.props.token,\r\n      isLoggedIn: false,\r\n      userData: \"\",\r\n      recipes: [],\r\n      logout: false,\r\n      isLoading: true,\r\n      inputRecipe: \"\",\r\n      recipeDescription: \"\"\r\n    }\r\n    this.goBack = this.goBack.bind(this);\r\n    this.showInput = this.showInput.bind(this);\r\n    this.loadRecipes = this.loadRecipes.bind(this);\r\n    this.plusRating = this.plusRating.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    //verify token\r\n    this.setState({ isLoading: true })\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            isLoggedIn: true,\r\n            userData: json.userData.userName,\r\n            isLoading: false\r\n          });\r\n          this.loadRecipes()\r\n        } else {\r\n          this.setState({\r\n            isLoggedIn: false,\r\n            isLoading: false\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n  //method capitalizes first letter of all words, used for titles etc.\r\n  capitalize_Words(str){\r\n    return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\r\n  }\r\n  //method renders an input form for new recipes\r\n  showInput() {\r\n    this.setState({ inputRecipe: <Container><div className=\"row align-items-center justify-content-center\"><PostRecipe user={this.state.userData} goBack={this.goBack} /></div></Container> })\r\n  }\r\n  //props function in recipe input form, used to return to main page\r\n  goBack() {\r\n    this.loadRecipes()\r\n    this.setState({ inputRecipe: \"\" })\r\n  }\r\n  //method capitalizes only the first letter in a string, used for descriptions etc.\r\n  jsUcfirst(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n  }\r\n  //method increments a recipe's rating by +1 if user has not already voted\r\n  plusRating(title, index) {\r\n    let self = this\r\n    fetch('/api/user/didvote', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.userData,\r\n        recipeTitle: title\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          fetch('/api/recipes/plusrating', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              title: title\r\n            }),\r\n          }).then((res) => { return res.json() }).then((json) => {\r\n            if (json.success) {\r\n              //this.loadRecipes()\r\n              let newRecipe = {}\r\n              fetch('/api/recipes/find', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  title: title\r\n                }),\r\n              }).then((res) => {\r\n                return res.json()\r\n              }).then((result) => {\r\n                newRecipe = result[0]\r\n                let newRecipeArray = [...self.state.recipes]\r\n                newRecipeArray[index] = <Col key={index} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(newRecipe.title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {newRecipe.user} </span><br></br> {self.jsUcfirst(newRecipe.description)}</p><img onClick={()=>{self.showDesc(newRecipe)}} src={newRecipe.image} id=\"imgClick\" className=\"img-fluid\"></img><p>Already voted!</p> <p>Rating: {newRecipe.rating} </p><br></br></div></Col>\r\n                self.setState({ recipes: newRecipeArray })\r\n              })\r\n            }\r\n          }\r\n          )\r\n        } else {\r\n          alert(\"already voted!\")\r\n        }\r\n      });\r\n  }\r\n  //method increments a recipe's rating by -1 if user has not already voted\r\n  minusRating(title, index) {\r\n    let self = this\r\n    fetch('/api/user/didvote', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.userData,\r\n        recipeTitle: title\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          fetch('/api/recipes/minusrating', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              title: title\r\n            })\r\n          }).then((res) => { return res.json() }).then((json) => {\r\n            if (json.success) {\r\n              let newRecipe = {}\r\n              fetch('/api/recipes/find', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  title: title\r\n                }),\r\n              }).then((res) => {\r\n                return res.json()\r\n              }).then((result) => {\r\n                newRecipe = result[0]\r\n                let newRecipeArray = [...self.state.recipes]\r\n                newRecipeArray[index] = <Col key={index} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(newRecipe.title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {newRecipe.user} </span><br></br> {self.jsUcfirst(newRecipe.description)}</p><img onClick={()=>{self.showDesc(newRecipe)}} src={newRecipe.image} id=\"imgClick\" className=\"img-fluid\"></img><p>Already voted!</p> <p>Rating: {newRecipe.rating} </p><br></br></div></Col>\r\n                self.setState({ recipes: newRecipeArray })\r\n              })\r\n            }\r\n          }\r\n          )\r\n        } else {\r\n          alert(\"already voted!\")\r\n        }\r\n      });\r\n\r\n  }\r\n  //method fetches all recipes from database, sorts by rating in descending order, and formats them for display\r\n  loadRecipes() {\r\n\r\n    let self = this\r\n    this.setState({ isLoading: true })\r\n    return fetch('/api/recipes', {\r\n      method: 'GET'\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        let allRecipes = []\r\n        json.sort(function (a, b) {\r\n          return b.rating - a.rating\r\n        })\r\n        for (let i = 0; i < json.length; i++) {\r\n          let recipeItem = fetch('/api/user/didvote', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              user: self.state.userData,\r\n              recipeTitle: json[i].title,\r\n              dontChange: true\r\n            }),\r\n          }).then(res => res.json())\r\n            .then(goodJson => {\r\n            if (goodJson.success) {\r\n              return <Col key={i} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\"}}>    <p><span style={{ fontWeight: \"bold\" }}>{this.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {this.jsUcfirst(json[i].description)}</p><img onClick={()=>{this.showDesc(json[i])}} src={json[i].image} id=\"imgClick\" className=\"img-fluid\"></img><Button style={{border: \"1px solid black\"}} variant=\"light\" onClick={() => { this.plusRating(json[i].title, i) }}> + </Button><Button style={{border: \"1px solid black\"}} variant=\"light\" onClick={() => { this.minusRating(json[i].title, i) }}> - </Button> <p>Rating: {json[i].rating} </p><br></br></div></Col>\r\n            } else {\r\n              return <Col key={i} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\"}}>    <p><span style={{ fontWeight: \"bold\" }}>{this.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {this.jsUcfirst(json[i].description)}</p><img onClick={()=>{this.showDesc(json[i])}} src={json[i].image} id=\"imgClick\" className=\"img-fluid\"></img><p>Already voted!</p> <p>Rating: {json[i].rating} </p><br></br></div></Col>\r\n            }\r\n          })\r\n          allRecipes.push(recipeItem)\r\n        }\r\n        Promise.all(allRecipes).then((allRecipes)=> {\r\n          this.setState({ recipes: allRecipes, isLoading: false })\r\n        })\r\n      })\r\n\r\n\r\n  }\r\n  //method shows a detailed description of recipe upon clicking\r\n  showDesc(recipe) {\r\n    let self = this\r\n    let arrayOfElements = []\r\n    for (let i = 0; i < recipe.ingredients.length; i++) {\r\n      arrayOfElements.push(<div>{`\\u2022`} {recipe.ingredients[i]}<br></br></div>)\r\n    }\r\n    let newComponent = <RecipeDescription title={this.capitalize_Words(recipe.title)} user={recipe.user} imgSrc={recipe.image} elements={arrayOfElements} longDesc={recipe.longDescription} instructions={recipe.instructions} goBack={()=>{self.setState({recipeDescription: \"\"})}}  />\r\n    this.setState({recipeDescription: newComponent})\r\n  }\r\n  //logs user out of current session\r\n  logout(token) {\r\n    this.setState({ isLoading: true })\r\n    fetch('/api/account/logout', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': token\r\n      }\r\n    }).then((res) => {\r\n      res.json()\r\n      this.props.saveToken(\"\")\r\n      this.setState({ logout: true, isLoggedIn: false, isLoading: false })\r\n    })\r\n\r\n  }\r\n  render() {\r\n    //if content is loading, display Loading ... screen\r\n    if (this.state.isLoading) {\r\n      return <Container> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n    }\r\n    //if a description exists in state, display that component\r\n    if (this.state.recipeDescription) {\r\n      return this.state.recipeDescription\r\n    }\r\n    //after logging out of session, return to entry page\r\n    if (this.state.logout) {\r\n      return <Redirect to='/' />\r\n    }\r\n    //if input form exists in state, display that component\r\n    if (this.state.inputRecipe) {\r\n      return this.state.inputRecipe\r\n    }\r\n    //check for token\r\n    if (this.state.token) {\r\n      //if token is valid and user successfully authenticates, display main recipes page\r\n      if (this.state.isLoggedIn) {\r\n        return (<Container>\r\n\r\n          <h3 className=\"text-center\"> Welcome {this.state.userData}, check out these Recipis!</h3>\r\n          <br></br>\r\n\r\n          <div className=\"text-center\">\r\n            <Button className=\"btn\" variant=\"secondary\" onClick={this.showInput}>Post a Recipi</Button>\r\n          </div>\r\n          <br></br>\r\n\r\n          <Row>\r\n            {this.state.recipes}\r\n            <br></br>\r\n          </Row>\r\n          <div className=\"text-center\">\r\n            <Button className=\"btn\" variant=\"secondary\" onClick={() => { this.logout(this.state.token) }}>Logout</Button>\r\n          </div>\r\n        </Container>)\r\n      } else {\r\n        return (<Container><div className=\"text-center\"><p>Loading ... </p></div></Container>)\r\n      }\r\n    } \r\n    //if no token exists to authenticate, return to entrypage \r\n    else if (!this.state.token) {\r\n      return (<div><Redirect to=\"/\" /></div>)\r\n    }\r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from \"react\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport LoginForm from './components/LoginForm'\nimport Home from './components/Home'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      token: \"\"\n    };\n    this.saveToken = this.saveToken.bind(this);\n  }\n  componentDidMount() {\n    document.title = \"Recipi\"\n\n    //check if there exists a token in localStorage already, and if so, try to verify it\n    if (this.state.token === \"\" && localStorage.getItem('tokenItem')) {\n      //start by saving localStorage token to state\n      var newToken = localStorage.getItem('tokenItem');\n      this.setState({ token: newToken })\n    } else if (this.state.token) {\n      fetch('/api/account/verify', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'token': this.state.token\n        }\n      }).then(res => res.json())\n        .then(json => {\n          if (json.success) {\n            //if token is valid, continue using it\n            console.log(\"token is valid\")\n          } else {\n            //otherwise, clear local storage and state \n            localStorage.setItem('tokenItem', \"\");\n            this.setState({\n              token: \"\"\n            });\n          }\n        });\n    }\n  }\n  saveToken(token) {\n    this.setState({ token: token })\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header id=\"headerClick\" style={{ backgroundColor: \"#9be0d1\" }}>\n            <h1 onClick={()=>{\n                window.location.href = '/'\n              }} className=\"Recipi\"> Recipi </h1>\n          </header>\n          <body style={{ backgroundColor: \"#dff5f0\", color: \"#49786e\" }}>\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/login\"/>\n            )} />\n            <Route exact path=\"/login\" render={(routeProps) => (\n              <LoginForm {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <Route exact path=\"/home\" render={(routeProps) => (\n              <Home {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <br></br>\n          </body>\n          <footer style={{ backgroundColor: \"#9be0d1\" }}>Website built by Nicolai Antonov, 2019</footer>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}