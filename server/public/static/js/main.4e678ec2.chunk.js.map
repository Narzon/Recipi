{"version":3,"sources":["components/EnterPage.js","components/LoginForm.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["EnterPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoggedIn","react_default","a","createElement","React","Component","LoginForm","props","handleChange","event","setState","defineProperty","target","id","value","handleSubmit","console","log","preventDefault","_this$state","email","password","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","success","signUpError","message","isLoading","length","className","onSubmit","FormGroup","controlId","bsSize","FormLabel","FormControl","autoFocus","type","onChange","Button","block","disabled","validateForm","Home","_this2","react_router","exact","path","render","to","App","react_router_dom","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e678ec2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom'\r\n\r\n\r\nclass EnterPage extends React.Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            /*\r\n            <Route exact path=\"/\" render={() => (\r\n                this.state.isLoggedIn ? (\r\n                  <Redirect to=\"/home\"/>\r\n                ) : (\r\n                  <Redirect to=\"/login\"/>\r\n                )\r\n              )}/>\r\n              */\r\n             <div>Hi, this is the basic enter page</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EnterPage","import React, { Component } from \"react\";\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\nimport \"./LoginForm.css\"\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        email: \"\",\r\n        password: \"\"\r\n      };\r\n    }\r\n  \r\n    validateForm() {\r\n      return this.state.email.length > 0 && this.state.password.length > 0;\r\n    }\r\n  \r\n    handleChange = event => {\r\n      this.setState({\r\n        [event.target.id]: event.target.value\r\n      });\r\n    }\r\n  \r\n    handleSubmit = event => {\r\n      console.log(\"handleSubmit works\")\r\n      event.preventDefault();\r\n      const {\r\n        email,\r\n        password,\r\n      } = this.state;\r\n      fetch('/api/users', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          password: password,\r\n        }),\r\n      }).then(res => res.json())\r\n        .then(json => {\r\n          console.log('json', json);\r\n          if (json.success) {\r\n            this.setState({\r\n              signUpError: json.message,\r\n              isLoading: false,\r\n              email: '',\r\n              password: '',\r\n            });\r\n          } else {\r\n            this.setState({\r\n              signUpError: json.message,\r\n              isLoading: false,\r\n            });\r\n          }\r\n        });   \r\n      }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"Login\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <FormGroup controlId=\"email\" bsSize=\"large\">\r\n              <FormLabel>Email  </FormLabel>\r\n              <FormControl\r\n                autoFocus\r\n                type=\"email\"\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup controlId=\"password\" bsSize=\"large\">\r\n              <FormLabel>Password  </FormLabel>\r\n              <FormControl\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                type=\"password\"\r\n              />\r\n            </FormGroup>\r\n            <Button\r\n              block\r\n              bsSize=\"large\"\r\n              disabled={!this.validateForm()}\r\n              type=\"submit\"\r\n            >\r\n              Login\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom'\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <Route exact path=\"/\" render={() => (\r\n                this.state.isLoggedIn ? (\r\n                  <h1> Welcome to Home </h1>\r\n                ) : (\r\n                  <Redirect to=\"/login\"/>\r\n                )\r\n              )}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport EnterPage from './components/EnterPage'\nimport LoginForm from './components/LoginForm'\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header>\n          <h1> Recipi </h1>\n        </header>\n        <body>\n        <Route exact path=\"/\" component={EnterPage} />\n        <Route exact path=\"/login\" component={LoginForm} />\n        <Route exact path=\"/home\" component={Home} />\n        </body>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}