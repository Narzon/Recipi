{"version":3,"sources":["components/LoginForm.js","components/RecipeDescription.js","components/PostRecipe.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","register","registerForm","backToLogin","handleLogin","isLoading","preventDefault","_this$state","state","email","password","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","success","saveToken","token","localStorage","setItem","toHome","signUpError","message","alert","handleSubmit","_this$state2","username","validSession","length","_this2","react_default","a","createElement","react_router","to","Container","className","onSubmit","FormGroup","controlId","bsSize","FormLabel","FormControl","autoFocus","type","onChange","Button","block","disabled","validateForm","onClick","Component","RecipeDescription","ratingButtons","title","user","src","imgSrc","elements","longDesc","instructions","goBack","React","PostRecipe","shortDesc","ingredients","imageURL","ingredientsArray","replace","split","map","item","toUpperCase","slice","description","longDescription","image","Home","handleSearch","newSearch","searchTerm","lcSearch","toLowerCase","newFiltRecipes","recipes","recipe","recipeTitleByIndex","key","includes","filtRecipes","isLoggedIn","userData","logout","inputRecipe","recipeDescription","myRecipes","showMyRecipes","toggleMyRecipesText","bind","assertThisInitialized","showInput","loadRecipes","plusRating","toggleMyRecipes","userName","str","txt","charAt","substr","components_PostRecipe","string","index","_this3","self","recipeTitle","newRecipe","result","newRecipeArray","toConsumableArray","rating","Col","xs","sm","style","textAlign","fontWeight","capitalize_Words","fontStyle","jsUcfirst","showDesc","boxShadow","_this4","_this5","allRecipes","sort","b","_loop","i","recipeItem","dontChange","goodJson","border","variant","minusRating","console","log","push","Promise","all","arrayOfElements","newComponent","components_RecipeDescription","_this6","displayedRecipes","Form","Group","Control","placeholder","Row","App","document","getItem","newToken","react_router_dom","backgroundColor","window","location","href","color","fontFamily","exact","path","render","routeProps","components_LoginForm","assign","components_Home","Boolean","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fb97c0e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      username: \"\",\r\n      isLoading: true,\r\n      signUpError: \"\",\r\n      registerForm: false,\r\n      token: this.props.token,\r\n      validSession: false,\r\n      toHome: false\r\n    };\r\n  }\r\n\r\n  //make sure user has provided both inputs\r\n  validateForm() {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n  //methods handle whether or not to render the registration form\r\n  register = event => {\r\n    this.setState({ registerForm: true })\r\n  }\r\n  backToLogin = event => {\r\n    this.setState({ registerForm: false })\r\n  }\r\n  //attempt to login\r\n  handleLogin = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n    } = this.state;\r\n    fetch('/api/account/signin', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if server cannot authenticate, alert user\r\n        if (!json.success) {\r\n          this.setState({\r\n            signUpError: json.message\r\n          })\r\n          alert(\"invalid login\")\r\n          this.setState({ isLoading: false })\r\n        ///otherwise, save token to state and localstorage and attempt to send user to home\r\n        } else {\r\n          this.props.saveToken(json.token)\r\n          localStorage.setItem('tokenItem', json.token);\r\n          this.setState({ toHome: true, isLoading: false })\r\n        }\r\n\r\n      });\r\n  }\r\n  //attempt to register new user\r\n  handleSubmit = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n      username\r\n    } = this.state;\r\n    fetch('/api/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        username: username\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if registration is successful, alert user to success and return to login\r\n        if (json.success) {\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n            email: '',\r\n            password: '',\r\n            username: ''\r\n          });\r\n          this.setState({ registerForm: false })\r\n        } else {\r\n        //if registration is unsuccessful (doe to username or email being taken already), alert use to try again\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n          });\r\n          alert(\"Username or email taken! Try again.\")\r\n        }\r\n      });\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true })\r\n    //on mounting, attempt to validate any current token in state\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            validSession: true\r\n          });\r\n        } else {\r\n          this.setState({\r\n            validSession: false\r\n          });\r\n        }\r\n        this.setState({ isLoading: false })\r\n      });\r\n    \r\n  }\r\n  render() {\r\n    //if successful login is indicated, return to entrypage with new token\r\n    if (this.state.toHome) {\r\n      return <Redirect to='/home' />\r\n    }\r\n    //display Loading ... if appropriate\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <Container> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n      )\r\n    }\r\n    //if it exists in state, render a registration form instead of login\r\n    if (this.state.registerForm) {\r\n      return (\r\n        <Container>\r\n          <div className=\"Login\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"username\" bsSize=\"large\">\r\n                <FormLabel>Username  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.username}\r\n                  onChange={this.handleChange}\r\n                  type=\"username\"\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n            </Button>\r\n              <br></br>\r\n              <Button\r\n                block\r\n                bsSize=\"small\"\r\n                type=\"submit\"\r\n                onClick={this.backToLogin}\r\n              >\r\n                Go Back\r\n            </Button>\r\n\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n    //if there is no token currently in state, or if there is a token that fails authentication, render the login form\r\n    if (!this.state.token || this.state.validSession === false) {\r\n      return (\r\n        <Container>\r\n          <div>\r\n            <p>Login here: </p>\r\n            <form onSubmit={this.handleLogin}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n              >\r\n                Login\r\n                </Button>\r\n\r\n            </form>\r\n            <br></br>\r\n\r\n\r\n            <Button\r\n              block\r\n              bsSize=\"large\"\r\n              type=\"button\"\r\n              onClick={this.register}>\r\n              Register\r\n          </Button>\r\n          </div>\r\n        </Container>\r\n      )\r\n    }\r\n    //by default, send user to home (assumes authentication has not failed)\r\n    return (\r\n      <div>\r\n        <p>Signed in</p>\r\n        <div><Redirect to=\"/home\" /></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport { Button, Container } from \"react-bootstrap\";\r\n\r\nclass RecipeDescription extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ratingButtons: this.props.ratingButtons\r\n        }\r\n    }\r\n    render() {\r\n        return <Container><h1>{this.props.title}</h1> <p>by {this.props.user}</p> <img className=\"img-fluid\" src={this.props.imgSrc}></img> {this.state.ratingButtons} {this.props.elements} <br></br> <p>{this.props.longDesc}</p><p>{this.props.instructions}</p><br></br><Button onClick={this.props.goBack}>Go Back</Button></Container>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default RecipeDescription","import React from 'react';\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\n\r\nclass PostRecipe extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: \"\",\r\n            shortDesc: \"\",\r\n            longDesc: \"\",\r\n            ingredients: [],\r\n            instructions: \"\",\r\n            imageURL: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //this.props.user\r\n\r\n    }\r\n    //post input data as new recipe to server\r\n    handleSubmit = event => {\r\n        this.setState({isLoading: true})\r\n        event.preventDefault();\r\n        const {\r\n            title,\r\n            shortDesc,\r\n            longDesc,\r\n            ingredients,\r\n            instructions,\r\n            imageURL\r\n        } = this.state;\r\n        let ingredientsArray = ingredients.replace(/\\s*,\\s*/g, \",\").split(',')\r\n        ingredientsArray = ingredientsArray.map((item)=>{\r\n            let newItem= \"\"+item[0].toUpperCase()+item.slice(1)\r\n            return newItem\r\n        })\r\n        fetch('/api/recipes', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                token: this.props.token,\r\n                user: this.props.user,\r\n                title: title,\r\n                description: shortDesc,\r\n                longDescription: longDesc,\r\n                ingredients: ingredientsArray,\r\n                instructions: instructions,\r\n                image: imageURL\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n            //upon successful posting, go back\r\n            if (json.success) {\r\n                alert(\"Recipi saved!\")\r\n                this.props.goBack()\r\n            } else {\r\n                //else, alert user of error and remain on page\r\n                alert(\"Failed! Server error.\")\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n        [event.target.id]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        //render an input form for a new recipe\r\n        return (<div className=\"col\">\r\n        <h2 className=\"text-center\">Here's your form, {this.props.user}</h2>\r\n            <form onSubmit={this.handleSubmit}>\r\n                <FormGroup controlId=\"title\" bsSize=\"large\">\r\n                    <FormLabel>Recipi Title  </FormLabel>\r\n                    <FormControl\r\n                    autoFocus\r\n                    type=\"title\"\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"shortDesc\" bsSize=\"large\">\r\n                    <FormLabel>A short summay  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.shortDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"shortDesc\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"longDesc\" bsSize=\"large\">\r\n                    <FormLabel>A longer description  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.longDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"longDesc\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"instructions\" bsSize=\"large\">\r\n                    <FormLabel>Recipi instructions  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.instructions}\r\n                    onChange={this.handleChange}\r\n                    type=\"instructions\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"ingredients\" bsSize=\"large\">\r\n                    <FormLabel>Ingredients  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.ingredients}\r\n                    onChange={this.handleChange}\r\n                    type=\"ingredients\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"imageURL\" bsSize=\"large\">\r\n                    <FormLabel>Image URL  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.imageURL}\r\n                    onChange={this.handleChange}\r\n                    type=\"imageURL\"\r\n                    />\r\n                </FormGroup>\r\n                <Button\r\n                    block\r\n                    bsSize=\"large\"\r\n                    type=\"submit\"\r\n                >\r\n                    Submit your Recipi!\r\n                </Button>\r\n                <br></br>\r\n                <Button onClick={this.props.goBack}>Go back</Button>\r\n            </form>\r\n        </div>)\r\n    }\r\n    }\r\n\r\n    export default PostRecipe","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Container, Row, Col, Form } from 'react-bootstrap';\r\nimport { Button } from \"react-bootstrap\";\r\nimport RecipeDescription from \"./RecipeDescription\"\r\nimport PostRecipe from './PostRecipe'\r\n\r\n\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      token: this.props.token,\r\n      isLoggedIn: false,\r\n      userData: \"\",\r\n      recipes: [],\r\n      logout: false,\r\n      isLoading: true,\r\n      inputRecipe: \"\",\r\n      recipeDescription: \"\",\r\n      searchTerm: \"\",\r\n      recipeTitleByIndex: [],\r\n      filtRecipes: [],\r\n      myRecipes: [<div><h3>Nothing to show!</h3></div>],\r\n      showMyRecipes: false,\r\n      toggleMyRecipesText: \"Show My Recipis\"\r\n    }\r\n    this.goBack = this.goBack.bind(this);\r\n    this.showInput = this.showInput.bind(this);\r\n    this.loadRecipes = this.loadRecipes.bind(this);\r\n    this.plusRating = this.plusRating.bind(this);\r\n    this.toggleMyRecipes = this.toggleMyRecipes.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    //verify token\r\n    this.setState({ isLoading: true })\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            isLoggedIn: true,\r\n            userData: json.userData.userName,\r\n            isLoading: false\r\n          });\r\n          this.loadRecipes()\r\n        } else {\r\n          this.setState({\r\n            isLoggedIn: false,\r\n            isLoading: false\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n  // handle a new search term being entered to filter which recipes are displayed\r\n  handleSearch = (event) => {\r\n    let newSearch = \"\"\r\n    if (event) {\r\n      newSearch = event.target.value\r\n      this.setState({\r\n        searchTerm: newSearch\r\n      });\r\n    } else {\r\n      newSearch = this.state.searchTerm\r\n    }\r\n    \r\n    let lcSearch = newSearch.toLowerCase()\r\n    let allRecipes = this.state.recipes\r\n    let newFiltRecipes = allRecipes.map((recipe) => {\r\n      let compareTitle = this.state.recipeTitleByIndex[recipe.key]\r\n      if(compareTitle.includes(lcSearch)) {\r\n        return recipe\r\n      } else {\r\n        return <div></div>\r\n      }\r\n    })\r\n    this.setState({filtRecipes: newFiltRecipes})\r\n  }\r\n  //method capitalizes first letter of all words, used for titles etc.\r\n  capitalize_Words(str){\r\n    return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\r\n  }\r\n  //method renders an input form for new recipes\r\n  showInput() {\r\n    this.setState({ inputRecipe: <Container><div className=\"row align-items-center justify-content-center\"><PostRecipe user={this.state.userData} token={this.state.token} goBack={this.goBack} /></div></Container> })\r\n  }\r\n  //props function in recipe input form, used to return to main page\r\n  goBack() {\r\n    this.loadRecipes()\r\n    this.setState({ inputRecipe: \"\" })\r\n  }\r\n  //method capitalizes only the first letter in a string, used for descriptions etc.\r\n  jsUcfirst(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n  }\r\n  //method increments a recipe's rating by +1 if user has not already voted\r\n  plusRating(title, index) {\r\n    let self = this\r\n    fetch('/api/user/didvote', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.userData,\r\n        recipeTitle: title,\r\n        token: this.state.token\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          fetch('/api/recipes/plusrating', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              title: title,\r\n              token: this.state.token\r\n            }),\r\n          }).then((res) => { return res.json() }).then((json) => {\r\n            if (json.success) {\r\n              //this.loadRecipes()\r\n              let newRecipe = {}\r\n              fetch('/api/recipes/find', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  title: title,\r\n                  token: this.state.token\r\n                }),\r\n              }).then((res) => {\r\n                return res.json()\r\n              }).then((result) => {\r\n                newRecipe = result[0]\r\n                let newRecipeArray = [...self.state.recipes]\r\n                let ratingButtons = <div><p>Already voted!</p> <p>Rating: {newRecipe.rating} </p></div>\r\n                newRecipeArray[index] = <Col key={index} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(newRecipe.title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {newRecipe.user} </span><br></br> {self.jsUcfirst(newRecipe.description)}</p><img onClick={()=>{self.showDesc(newRecipe, ratingButtons)}} src={newRecipe.image} id=\"imgClick\" className=\"img-fluid\" style={{boxShadow: \"1px 3px 1px #9E9E9E\"}}></img>{ratingButtons}<br></br></div></Col>\r\n                self.setState({ recipes: newRecipeArray })\r\n\r\n                //if page is currently displayed a recipe description, refresh the component to display new rating properly\r\n                if(self.state.recipeDescription){\r\n                  self.setState({recipeDescription: \"\"})\r\n                  self.showDesc(newRecipe, ratingButtons)\r\n                }\r\n                //if there is currently a search term filtering results, refresh the filtering to display new rating properly\r\n                if(self.state.searchTerm) {\r\n                  self.handleSearch()\r\n                }\r\n                //if user is currently viewing their own recipes, refresh the list to update rankings properly\r\n                if(self.state.showMyRecipes) {\r\n                  self.loadRecipes()\r\n                }\r\n\r\n              })\r\n            }\r\n          }\r\n          )\r\n        } else {\r\n          alert(\"already voted!\")\r\n        }\r\n      });\r\n  }\r\n  //method increments a recipe's rating by -1 if user has not already voted\r\n  minusRating(title, index) {\r\n    let self = this\r\n    fetch('/api/user/didvote', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.userData,\r\n        recipeTitle: title,\r\n        token: this.state.token\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          fetch('/api/recipes/minusrating', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              title: title,\r\n              token: this.state.token\r\n            })\r\n          }).then((res) => { return res.json() }).then((json) => {\r\n            if (json.success) {\r\n              let newRecipe = {}\r\n              fetch('/api/recipes/find', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  title: title,\r\n                  token: this.state.token\r\n                }),\r\n              }).then((res) => {\r\n                return res.json()\r\n              }).then((result) => {\r\n                newRecipe = result[0]\r\n                let newRecipeArray = [...self.state.recipes]\r\n                let ratingButtons = <div><p>Already voted!</p> <p>Rating: {newRecipe.rating} </p></div>\r\n                newRecipeArray[index] = <Col key={index} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(newRecipe.title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {newRecipe.user} </span><br></br> {self.jsUcfirst(newRecipe.description)}</p><img onClick={()=>{self.showDesc(newRecipe, ratingButtons)}} src={newRecipe.image} id=\"imgClick\" className=\"img-fluid\" style={{boxShadow: \"1px 3px 1px #9E9E9E\"}}></img>{ratingButtons}<br></br></div></Col>\r\n                self.setState({ recipes: newRecipeArray })\r\n\r\n                //if page is currently displayed a recipe description, refresh the component to display new rating properly\r\n                if(self.state.recipeDescription){\r\n                  self.setState({recipeDescription: \"\"})\r\n                  self.showDesc(newRecipe, ratingButtons)\r\n                }\r\n                //if there is currently a search term filtering results, refresh the filtering to display new rating properly\r\n                if(self.state.searchTerm) {\r\n                  self.handleSearch()\r\n                }\r\n                //if user is currently viewing their own recipes, refresh the list to update rankings properly\r\n                if(self.state.showMyRecipes) {\r\n                  self.loadRecipes()\r\n                }\r\n\r\n              })\r\n            }\r\n          }\r\n          )\r\n        } else {\r\n          alert(\"already voted!\")\r\n        }\r\n      });\r\n\r\n  }\r\n  //method fetches all recipes from database, sorts by rating in descending order, and format them for display\r\n  loadRecipes() {\r\n\r\n    let self = this\r\n    this.setState({ isLoading: true })\r\n    return fetch('/api/recipes', {\r\n      method: 'GET',\r\n      headers: {\r\n        'token': this.state.token\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        let allRecipes = []\r\n        let myRecipes = []\r\n        json.sort(function (a, b) {\r\n          return b.rating - a.rating\r\n        })\r\n        //check if current user voted already on each recipe\r\n        for (let i = 0; i < json.length; i++) {\r\n          let recipeItem = fetch('/api/user/didvote', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              user: self.state.userData,\r\n              recipeTitle: json[i].title,\r\n              dontChange: true,\r\n              token: this.state.token\r\n            }),\r\n          }).then(res => res.json())\r\n            .then(goodJson => {\r\n            let ratingButtons = \"\"\r\n            if (goodJson.success) {\r\n              ratingButtons = <div><Button style={{border: \"1px solid black\"}} variant=\"light\" onClick={() => { this.plusRating(json[i].title, i) }}> + </Button><Button style={{border: \"1px solid black\"}} variant=\"light\" onClick={() => { this.minusRating(json[i].title, i) }}> - </Button> <p>Rating: {json[i].rating} </p></div>\r\n            } else {\r\n              ratingButtons = <div><p>Already voted!</p> <p>Rating: {json[i].rating} </p></div>\r\n            }\r\n            let recipeTitleByIndex = self.state.recipeTitleByIndex\r\n            recipeTitleByIndex[i] = json[i].title\r\n            self.setState({recipeTitleByIndex: recipeTitleByIndex})\r\n\r\n            // if current user is the author of a recipe, add it to their own array\r\n            if (self.state.userData === json[i].user){\r\n              console.log(\"adding a recipe to the myRecipes array. recipe author is: \"+json[i].user+\" and current user is: \"+self.state.userData)\r\n              myRecipes.push(<Col key={i} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\"}}>    <p><span style={{ fontWeight: \"bold\" }}>{this.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {this.jsUcfirst(json[i].description)}</p><img onClick={()=>{this.showDesc(json[i], ratingButtons)}} src={json[i].image} id=\"imgClick\" className=\"img-fluid\" style={{boxShadow: \"1px 3px 1px #9E9E9E\"}}></img>{ratingButtons}<br></br></div></Col>)\r\n            }\r\n\r\n            return <Col key={i} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\"}}>    <p><span style={{ fontWeight: \"bold\" }}>{this.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {this.jsUcfirst(json[i].description)}</p><img onClick={()=>{this.showDesc(json[i], ratingButtons)}} src={json[i].image} id=\"imgClick\" className=\"img-fluid\" style={{boxShadow: \"1px 3px 1px #9E9E9E\"}}></img>{ratingButtons}<br></br></div></Col>\r\n          })\r\n          allRecipes.push(recipeItem)\r\n        }\r\n        Promise.all(allRecipes).then((allRecipes)=> {\r\n          if (!myRecipes[0]) {\r\n            myRecipes.push(<div><h3>Nothing to show!</h3></div>)\r\n          }\r\n          this.setState({ recipes: allRecipes, myRecipes: myRecipes, isLoading: false })\r\n        })\r\n      })\r\n\r\n\r\n  }\r\n  //method shows a detailed description of recipe upon clicking\r\n  showDesc(recipe, ratingButtons) {\r\n    let self = this\r\n    let arrayOfElements = []\r\n    for (let i = 0; i < recipe.ingredients.length; i++) {\r\n      arrayOfElements.push(<div>{`\\u2022`} {recipe.ingredients[i]}<br></br></div>)\r\n    }\r\n    let newComponent = <RecipeDescription ratingButtons={ratingButtons} title={this.capitalize_Words(recipe.title)} user={recipe.user} imgSrc={recipe.image} elements={arrayOfElements} longDesc={recipe.longDescription} instructions={recipe.instructions} goBack={()=>{self.setState({recipeDescription: \"\"})}}  />\r\n    this.setState({recipeDescription: newComponent})\r\n  }\r\n  toggleMyRecipes() {\r\n    if (this.state.showMyRecipes) {\r\n      this.setState({showMyRecipes: false, toggleMyRecipesText: \"Show My Recipis\"})\r\n    } else {\r\n      this.setState({showMyRecipes: true, toggleMyRecipesText: \"Show All Recipis\"})\r\n    }\r\n  }\r\n  //logs user out of current session\r\n  logout(token) {\r\n    this.setState({ isLoading: true })\r\n    //NOW STATELESS - simply clear token from client-side\r\n    this.props.saveToken(\"\")\r\n    this.setState({ logout: true, isLoggedIn: false, isLoading: false })\r\n\r\n  }\r\n  render() {\r\n    //if content is loading, display Loading ... screen\r\n    if (this.state.isLoading) {\r\n      return <Container> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n    }\r\n    //if a description exists in state, display that component\r\n    if (this.state.recipeDescription) {\r\n      return this.state.recipeDescription\r\n    }\r\n    //after logging out of session, return to entry page\r\n    if (this.state.logout) {\r\n      return <Redirect to='/' />\r\n    }\r\n    //if input form exists in state, display that component\r\n    if (this.state.inputRecipe) {\r\n      return this.state.inputRecipe\r\n    }\r\n    //check for token\r\n    if (this.state.token) {\r\n      //if token is valid and user successfully authenticates, display main recipes page\r\n      if (this.state.isLoggedIn) {\r\n        let displayedRecipes = \"\"\r\n        //if there is currently a non-empty search term string, only display filtered recipes\r\n        if (this.state.searchTerm !== \"\") {\r\n          displayedRecipes = this.state.filtRecipes\r\n        } else {\r\n          displayedRecipes = this.state.recipes\r\n        }\r\n        if (this.state.showMyRecipes) {\r\n          displayedRecipes = this.state.myRecipes\r\n        }\r\n        return (<Container>\r\n\r\n          <h3 className=\"text-center\"> Welcome {this.state.userData}, check out these Recipis!</h3>\r\n          <Form>\r\n              <Form.Group controlId=\"formSearchTerms\">\r\n              <Form.Control\r\n                value={this.state.searchTerm}\r\n                onChange={this.handleSearch} \r\n                type=\"search\" \r\n                placeholder=\"Search Recipi titles ...\" />\r\n              </Form.Group>\r\n          </Form>\r\n          <br></br>\r\n\r\n          <div className=\"text-center\">\r\n            <Button className=\"btn\" variant=\"secondary\" onClick={this.showInput}>Post a Recipi</Button>    <span> </span>\r\n            <Button className=\"btn\" variant=\"secondary\" onClick={this.toggleMyRecipes}>{this.state.toggleMyRecipesText}</Button>\r\n          </div>\r\n          <br></br>\r\n\r\n          <Row>\r\n            {displayedRecipes}\r\n            <br></br>\r\n          </Row>\r\n          <div className=\"text-center\">\r\n            <Button className=\"btn\" variant=\"secondary\" onClick={() => { this.logout(this.state.token) }}>Logout</Button>\r\n          </div>\r\n        </Container>)\r\n      } else {\r\n        return (<Container><div className=\"text-center\"><p>Loading ... </p></div></Container>)\r\n      }\r\n    } \r\n    //if no token exists to authenticate, return to entrypage \r\n    else if (!this.state.token) {\r\n      return (<div><Redirect to=\"/\" /></div>)\r\n    }\r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from \"react\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport LoginForm from './components/LoginForm'\nimport Home from './components/Home'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      token: \"\"\n    };\n    this.saveToken = this.saveToken.bind(this);\n  }\n  componentDidMount() {\n    document.title = \"Recipi\"\n\n    //check if there exists a token in localStorage already, and if so, try to verify it\n    if (this.state.token === \"\" && localStorage.getItem('tokenItem')) {\n      //start by saving localStorage token to state\n      var newToken = localStorage.getItem('tokenItem');\n      this.setState({ token: newToken })\n    } else if (this.state.token) {\n      fetch('/api/account/verify', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'token': this.state.token\n        }\n      }).then(res => res.json())\n        .then(json => {\n          if (json.success) {\n            //if token is valid, continue using it\n            console.log(\"token is valid\")\n          } else {\n            //otherwise, clear local storage and state \n            this.saveToken(\"\")\n          }\n        });\n    }\n  }\n  saveToken(token) {\n    console.log(\"saveToken is called with token: \"+token)\n    localStorage.setItem('tokenItem', token)\n    this.setState({ token: token })\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header id=\"headerClick\" style={{ backgroundColor: \"#6dc4ed\" }}>\n            <h1 onClick={()=>{\n                window.location.href = '/'\n              }} className=\"Recipi\"> Recipi </h1>\n          </header>\n          <body style={{ backgroundColor: \"#e6f5fc\", color: \"#1c7fad\", fontFamily: \"Quicksand\" }}>\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/login\"/>\n            )} />\n            <Route exact path=\"/login\" render={(routeProps) => (\n              <LoginForm {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <Route exact path=\"/home\" render={(routeProps) => (\n              <Home {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <br></br>\n          </body>\n          <footer style={{ backgroundColor: \"#6dc4ed\" }}>Website built by Nicolai Antonov, 2019</footer>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}