{"version":3,"sources":["components/LoginForm.js","components/RecipeDescription.js","components/PostRecipe.js","components/Map.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","register","registerForm","backToLogin","handleLogin","isLoading","preventDefault","_this$state","state","email","password","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","success","saveToken","token","localStorage","setItem","toHome","signUpError","message","alert","handleSubmit","_this$state2","username","validSession","length","_this2","react_default","a","createElement","react_router","to","Container","style","height","className","onSubmit","FormGroup","controlId","bsSize","FormLabel","FormControl","autoFocus","type","onChange","Button","block","disabled","validateForm","variant","onClick","Component","RecipeDescription","componentDidMount","loadComments","e","commentText","recipe","title","newComments","map","comment","index","key","border","margin","padding","borderRadius","fontWeight","user","opacity","date","comments","reverse","handleCommentSubmit","currentUser","ratingButtons","goBack","maxHeight","src","imgSrc","elements","longDesc","instructions","Form","Group","Control","as","rows","placeholder","React","PostRecipe","shortDesc","ingredients","imageURL","restaurant","city","ingredientsArray","replace","split","item","toUpperCase","slice","description","longDescription","image","console","log","mapStyles","width","MapContainer","_Component","onMarkerClick","marker","selectedPlace","activeMarker","showingInfoWindow","onClose","userLocation","lat","lng","recipiMarkers","displayMarkers","inherits","createClass","navigator","geolocation","getCurrentPosition","position","_position$coords","coords","latitude","longitude","markers","i","newMarker","dist","location","name","push","dir","google","zoom","initialCenter","visible","GoogleApiWrapper","apiKey","Home","handleSearch","newSearch","searchTerm","lcSearch","toLowerCase","newFiltRecipes","recipes","recipeTitleByIndex","includes","filtRecipes","isLoggedIn","userData","logout","inputRecipe","recipeDescription","myRecipes","showMyRecipes","toggleMyRecipesText","showMap","bind","assertThisInitialized","showInput","loadRecipes","plusRating","toggleMyRecipes","toggleMap","loadRandomRecipe","userName","str","txt","charAt","substr","components_PostRecipe","doRefresh","string","_this3","self","recipeTitle","newRecipe","result","newRecipeArray","toConsumableArray","rating","Col","xs","sm","textAlign","showDesc","capitalize_Words","fontStyle","jsUcfirst","_this4","_this5","Math","floor","random","dontChange","goodJson","fontSize","minusRating","_this6","allRecipes","sort","b","_loop","recipeItem","Promise","all","altGoBack","arrayOfElements","newComponent","components_RecipeDescription","window","scrollTo","_this7","Map","displayedRecipes","Row","App","document","getItem","newToken","react_router_dom","backgroundColor","href","color","fontFamily","exact","path","render","routeProps","components_LoginForm","assign","components_Home","Boolean","hostname","match","ReactDOM","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8daf5a21.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      username: \"\",\r\n      isLoading: true,\r\n      signUpError: \"\",\r\n      registerForm: false,\r\n      token: this.props.token,\r\n      validSession: false,\r\n      toHome: false\r\n    };\r\n  }\r\n\r\n  //make sure user has provided both inputs\r\n  validateForm() {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n  //methods handle whether or not to render the registration form\r\n  register = event => {\r\n    this.setState({ registerForm: true })\r\n  }\r\n  backToLogin = event => {\r\n    this.setState({ registerForm: false })\r\n  }\r\n  //attempt to login\r\n  handleLogin = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n    } = this.state;\r\n    fetch('/api/account/signin', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if server cannot authenticate, alert user\r\n        if (!json.success) {\r\n          this.setState({\r\n            signUpError: json.message\r\n          })\r\n          alert(\"invalid login\")\r\n          this.setState({ isLoading: false })\r\n        ///otherwise, save token to state and localstorage and attempt to send user to home\r\n        } else {\r\n          this.props.saveToken(json.token)\r\n          localStorage.setItem('tokenItem', json.token);\r\n          this.setState({ toHome: true, isLoading: false })\r\n        }\r\n\r\n      });\r\n  }\r\n  //attempt to register new user\r\n  handleSubmit = event => {\r\n    this.setState({ isLoading: true })\r\n    event.preventDefault();\r\n    const {\r\n      email,\r\n      password,\r\n      username\r\n    } = this.state;\r\n    fetch('/api/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        username: username\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        //if registration is successful, alert user to success and return to login\r\n        if (json.success) {\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n            email: '',\r\n            password: '',\r\n            username: ''\r\n          });\r\n          this.setState({ registerForm: false })\r\n        } else {\r\n        //if registration is unsuccessful (doe to username or email being taken already), alert use to try again\r\n          this.setState({\r\n            signUpError: json.message,\r\n            isLoading: false,\r\n          });\r\n          alert(\"Username or email taken! Try again.\")\r\n        }\r\n      });\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true })\r\n    //on mounting, attempt to validate any current token in state\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            validSession: true\r\n          });\r\n        } else {\r\n          this.setState({\r\n            validSession: false\r\n          });\r\n        }\r\n        this.setState({ isLoading: false })\r\n      });\r\n    \r\n  }\r\n  render() {\r\n    //if successful login is indicated, return to entrypage with new token\r\n    if (this.state.toHome) {\r\n      return <Redirect to='/home' />\r\n    }\r\n    //display Loading ... if appropriate\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <Container style={{height: \"900px\"}}> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n      )\r\n    }\r\n    //if it exists in state, render a registration form instead of login\r\n    if (this.state.registerForm) {\r\n      return (\r\n        <Container style={{height: \"900px\"}}>\r\n          <div className=\"Login\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"username\" bsSize=\"large\">\r\n                <FormLabel>Username  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.username}\r\n                  onChange={this.handleChange}\r\n                  type=\"username\"\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n                variant=\"info\"\r\n              >\r\n                Register\r\n            </Button>\r\n              <br></br>\r\n              <Button\r\n                block\r\n                bsSize=\"small\"\r\n                type=\"submit\"\r\n                variant=\"info\"\r\n                onClick={this.backToLogin}\r\n              >\r\n                Go Back\r\n            </Button>\r\n\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n    //if there is no token currently in state, or if there is a token that fails authentication, render the login form\r\n    if (!this.state.token || this.state.validSession === false) {\r\n      return (\r\n        <Container style={{height: \"900px\"}}>\r\n          <div>\r\n            <p>Login here: </p>\r\n            <form onSubmit={this.handleLogin}>\r\n              <FormGroup controlId=\"email\" bsSize=\"large\">\r\n                <FormLabel>Email  </FormLabel>\r\n                <FormControl\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup controlId=\"password\" bsSize=\"large\">\r\n                <FormLabel>Password  </FormLabel>\r\n                <FormControl\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              </FormGroup>\r\n              <Button\r\n                block\r\n                bsSize=\"large\"\r\n                disabled={!this.validateForm()}\r\n                type=\"submit\"\r\n                variant=\"info\"\r\n              >\r\n                Login\r\n                </Button>\r\n\r\n            </form>\r\n            <br></br>\r\n\r\n\r\n            <Button\r\n              block\r\n              bsSize=\"large\"\r\n              type=\"button\"\r\n              variant=\"info\"\r\n              onClick={this.register}>\r\n              Register\r\n          </Button>\r\n          </div>\r\n        </Container>\r\n      )\r\n    }\r\n    //by default, send user to home (assumes authentication has not failed)\r\n    return (\r\n      <div>\r\n        <p>Signed in</p>\r\n        <div><Redirect to=\"/home\" /></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\n\r\nclass RecipeDescription extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ratingButtons: this.props.ratingButtons,\r\n            title: this.props.title,\r\n            user: this.props.user,\r\n            commentText: \"\",\r\n            token: this.props.token,\r\n            comments: []\r\n\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        this.loadComments()\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({commentText: e.target.value})\r\n    }\r\n    loadComments = () => {\r\n        return fetch('/api/comments', {\r\n            method: 'GET',\r\n            headers: {\r\n              'token': this.state.token,\r\n              'recipe': this.state.title\r\n            },\r\n          })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                let newComments = json.map((comment, index)=>{\r\n                    return <div key={index} style={{border: \"1px solid #6EC2F0\", margin: \"2px\", padding: \"10px\", borderRadius: \"10px\"}}><p><span style={{ fontWeight: \"bold\"}}>{comment.user}</span> - <span opacity={0.5}>{comment.date}</span></p><p>{comment.comment}</p></div>\r\n                })\r\n                this.setState({comments: newComments.reverse()})\r\n\r\n\r\n\r\n\r\n\r\n            })\r\n\r\n    }\r\n    handleCommentSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.setState({commentText: \"\"})\r\n        if (!this.state.commentText) {\r\n            alert(\"Comment cannot be blank!\")\r\n            return \"error\"\r\n        }\r\n        const {\r\n            title,\r\n            commentText,\r\n            token\r\n        } = this.state;\r\n        let user = this.props.currentUser\r\n        fetch('/api/comments', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                recipe: title,\r\n                user: user,\r\n                comment: commentText,\r\n                token: token\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n        }).then(()=>{this.loadComments()});\r\n\r\n    }\r\n    render() {\r\n        return <Container>\r\n                <br></br>\r\n                <Button variant=\"info\" onClick={this.props.goBack}>Go Back</Button>\r\n                <h1>{this.state.title}</h1> <p>by {this.state.user}</p> \r\n                <img className=\"img-fluid shadow-lg p-2 mb-3 rounded\" style={{\"maxHeight\": 550}} src={this.props.imgSrc}></img>\r\n                {this.state.ratingButtons} {this.props.elements} <br></br>\r\n                <p>{this.props.longDesc}</p><p>{this.props.instructions}</p>\r\n                <br></br>\r\n                <h3>Leave a comment below!</h3>\r\n                <Form\r\n                onSubmit={this.handleCommentSubmit}>\r\n                    <Form.Group controlId=\"commentInput\">\r\n                        <Form.Control \r\n                        as=\"textarea\" \r\n                        rows=\"3\"\r\n                        placeholder=\"Enter comment ...\"\r\n                        value={this.state.commentText}\r\n                        onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Button\r\n                        block\r\n                        type=\"submit\"\r\n                        variant=\"info\"\r\n                    >\r\n                        Submit!\r\n                    </Button>\r\n                </Form>\r\n                <br></br>\r\n                {this.state.comments}\r\n              \r\n              \r\n            </Container>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default RecipeDescription","import React from 'react';\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\n\r\nclass PostRecipe extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: \"\",\r\n            shortDesc: \"\",\r\n            longDesc: \"\",\r\n            ingredients: [],\r\n            instructions: \"\",\r\n            imageURL: \"\",\r\n            restaurant: \"\",\r\n            city: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //this.props.user\r\n\r\n    }\r\n    //post input data as new recipe to server\r\n    handleSubmit = event => {\r\n        this.setState({isLoading: true})\r\n        event.preventDefault();\r\n        const {\r\n            title,\r\n            shortDesc,\r\n            longDesc,\r\n            ingredients,\r\n            instructions,\r\n            imageURL,\r\n            restaurant,\r\n            city\r\n        } = this.state;\r\n        let ingredientsArray = ingredients.replace(/\\s*,\\s*/g, \",\").split(',')\r\n        ingredientsArray = ingredientsArray.map((item)=>{\r\n            let newItem= \"\"+item[0].toUpperCase()+item.slice(1)\r\n            return newItem\r\n        })\r\n        fetch('/api/recipes', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                token: this.props.token,\r\n                user: this.props.user,\r\n                title: title,\r\n                description: shortDesc,\r\n                longDescription: longDesc,\r\n                ingredients: ingredientsArray,\r\n                instructions: instructions,\r\n                image: imageURL\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n            //upon successful posting, go back\r\n            if (json.success) {\r\n                alert(\"Recipi saved!\")\r\n                this.props.goBack(true)\r\n            } else {\r\n                //else, alert user of error and remain on page\r\n                alert(\"Failed! Server error.\")\r\n            }\r\n        });\r\n\r\n        //attempt to post marker for google map\r\n        fetch('/api/markers', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                token: this.props.token,\r\n                recipe: title,\r\n                restaurant: restaurant,\r\n                city: city\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(json => {\r\n            //upon successful posting, go back\r\n            if (json.success) {\r\n                console.log(\"marker saved successfully\")\r\n            } \r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n        [event.target.id]: event.target.value\r\n        });\r\n    }\r\n    render() {\r\n        //render an input form for a new recipe\r\n        return (<div className=\"col\">\r\n        <h2 className=\"text-center\">Here's your form, {this.props.user}</h2>\r\n            <form onSubmit={this.handleSubmit}>\r\n                <FormGroup controlId=\"title\" bsSize=\"large\">\r\n                    <FormLabel>Recipi Title  </FormLabel>\r\n                    <FormControl\r\n                    autoFocus\r\n                    type=\"title\"\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Enter your Recipi title ... \"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"shortDesc\" bsSize=\"large\">\r\n                    <FormLabel>A short summay  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.shortDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"shortDesc\"\r\n                    as=\"textarea\" \r\n                    placeholder=\"Enter a short subtitle for your Recipi\"\r\n                    rows=\"2\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"longDesc\" bsSize=\"large\">\r\n                    <FormLabel>A longer description  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.longDesc}\r\n                    onChange={this.handleChange}\r\n                    type=\"longDesc\"\r\n                    as=\"textarea\" \r\n                    placeholder=\"Enter your full description or Recipi story here ...\"\r\n                    rows=\"4\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"instructions\" bsSize=\"large\">\r\n                    <FormLabel>Recipi instructions  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.instructions}\r\n                    onChange={this.handleChange}\r\n                    type=\"instructions\"\r\n                    as=\"textarea\"\r\n                    placeholder=\"Enter your instructions ... \" \r\n                    rows=\"4\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"ingredients\" bsSize=\"large\">\r\n                    <FormLabel>Ingredients  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.ingredients}\r\n                    onChange={this.handleChange}\r\n                    type=\"ingredients\"\r\n                    as=\"textarea\"\r\n                    placeholder=\"Separate by commas\" \r\n                    rows=\"4\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"imageURL\" bsSize=\"large\">\r\n                    <FormLabel>Image URL  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.imageURL}\r\n                    onChange={this.handleChange}\r\n                    type=\"imageURL\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"restaurant\" bsSize=\"large\">\r\n                    <FormLabel>(Optional) Restaurant  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.restaurant}\r\n                    onChange={this.handleChange}\r\n                    type=\"restaurant\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"city\" bsSize=\"large\">\r\n                    <FormLabel>(Optional) City  </FormLabel>\r\n                    <FormControl\r\n                    value={this.state.city}\r\n                    onChange={this.handleChange}\r\n                    type=\"city\"\r\n                    />\r\n                </FormGroup>\r\n                <Button\r\n                    block\r\n                    bsSize=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"info\"\r\n                >\r\n                    Submit your Recipi!\r\n                </Button>\r\n                <br></br>\r\n                <Button variant=\"info\" onClick={()=>{this.props.goBack(false)}}>Go back</Button>\r\n            </form>\r\n        </div>)\r\n    }\r\n    }\r\n\r\n    export default PostRecipe","import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n    width: '100%',\r\n    height: '90%'\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            token: this.props.token,\r\n            isLoading: true,\r\n            showingInfoWindow: false,\r\n            activeMarker: {},\r\n            selectedPlace: {},\r\n            userLocation: { lat: 30.26, lng: -97.74},\r\n            recipiMarkers: [],\r\n            displayMarkers: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n      navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n              const { latitude, longitude } = position.coords;\r\n      \r\n              this.setState({\r\n                userLocation: { lat: latitude, lng: longitude },\r\n                isLoading: false\r\n              });\r\n\r\n            },\r\n            () => {\r\n                //permission denied\r\n              this.setState({ isLoading: false });\r\n            }\r\n          );\r\n\r\n      fetch('/api/markers', {\r\n        method: 'GET',\r\n        headers: {\r\n          'token': this.state.token\r\n        },\r\n      })\r\n        .then(res => res.json())\r\n        .then(markers => {\r\n            let recipiMarkers = this.state.recipiMarkers\r\n            for (let i = 0; i < markers.length; i++) {\r\n              //let newMarker = {\r\n               // restaurant: markers[i].restaurant,\r\n               // recipe: markers[i].recipe,\r\n               // location: markers[i].location\r\n              //}\r\n              let newMarker = <Marker\r\n              position={markers[i].location}\r\n              onClick={this.onMarkerClick}\r\n              name={markers[i].restaurant+\" - \"+markers[i].recipe}\r\n              />\r\n              recipiMarkers.push(newMarker)\r\n            }\r\n            this.setState({recipiMarkers: recipiMarkers})\r\n            console.log(\"here is your markers state array: \")\r\n            console.dir(this.state.recipiMarkers)\r\n        })\r\n    }\r\n    onMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n    onClose = props => {\r\n        if (this.state.showingInfoWindow) {\r\n          this.setState({\r\n            showingInfoWindow: false,\r\n            activeMarker: null\r\n          });\r\n        }\r\n      };\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return <div>Loading ... </div>\r\n        }\r\n        return (\r\n            <Map\r\n              google={this.props.google}\r\n              zoom={14}\r\n              style={mapStyles}\r\n              initialCenter={this.state.userLocation}\r\n            >\r\n              {this.state.recipiMarkers}\r\n              <InfoWindow\r\n                marker={this.state.activeMarker}\r\n                visible={this.state.showingInfoWindow}\r\n                onClose={this.onClose}\r\n              >\r\n                <div>\r\n                  <h4>{this.state.selectedPlace.name}</h4>\r\n                </div>\r\n              </InfoWindow>\r\n            </Map>\r\n          );\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyClOhMinsJlKmviBdX43_mVHtn4Uk7qb6k'\r\n})(MapContainer);","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Container, Row, Col, Form } from 'react-bootstrap';\r\nimport { Button } from \"react-bootstrap\";\r\nimport RecipeDescription from \"./RecipeDescription\"\r\nimport PostRecipe from './PostRecipe'\r\nimport Map from \"./Map\"\r\n\r\n\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      token: this.props.token,\r\n      isLoggedIn: false,\r\n      userData: \"\",\r\n      recipes: [],\r\n      logout: false,\r\n      isLoading: true,\r\n      inputRecipe: \"\",\r\n      recipeDescription: \"\",\r\n      searchTerm: \"\",\r\n      recipeTitleByIndex: [],\r\n      filtRecipes: [],\r\n      myRecipes: [<h3>Nothing to show!</h3>],\r\n      showMyRecipes: false,\r\n      toggleMyRecipesText: \"Show My Recipis\",\r\n      showMap: false\r\n    }\r\n    this.goBack = this.goBack.bind(this);\r\n    this.showInput = this.showInput.bind(this);\r\n    this.loadRecipes = this.loadRecipes.bind(this);\r\n    this.plusRating = this.plusRating.bind(this);\r\n    this.toggleMyRecipes = this.toggleMyRecipes.bind(this);\r\n    this.toggleMap = this.toggleMap.bind(this);\r\n    this.loadRandomRecipe = this.loadRandomRecipe.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    //verify token\r\n    this.setState({ isLoading: true })\r\n    fetch('/api/account/verify', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'token': this.state.token\r\n      }\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          this.setState({\r\n            isLoggedIn: true,\r\n            userData: json.userData.userName,\r\n            isLoading: false\r\n          });\r\n          this.loadRecipes()\r\n        } else {\r\n          this.setState({\r\n            isLoggedIn: false,\r\n            isLoading: false\r\n          });\r\n        }\r\n      });\r\n\r\n  }\r\n  // handle a new search term being entered to filter which recipes are displayed\r\n  handleSearch = (event) => {\r\n    let newSearch = \"\"\r\n    if (event) {\r\n      newSearch = event.target.value\r\n      this.setState({\r\n        searchTerm: newSearch\r\n      });\r\n    } else {\r\n      //if this method is being called from a context without any event, continue using existing search term\r\n      newSearch = this.state.searchTerm\r\n    }\r\n\r\n    //convert search term to lowercase\r\n    let lcSearch = newSearch.toLowerCase()\r\n    let allRecipes = this.state.recipes\r\n    //map over all recipes\r\n    let newFiltRecipes = allRecipes.map((recipe) => {\r\n      let compareTitle = this.state.recipeTitleByIndex[recipe.key]\r\n      //if title of recipe includes the search term, return it to the new filtered array\r\n      if (compareTitle.includes(lcSearch)) {\r\n        return recipe\r\n      } else {\r\n        return <div></div>\r\n      }\r\n    })\r\n    this.setState({ filtRecipes: newFiltRecipes })\r\n  }\r\n  //method capitalizes first letter of all words, used for titles etc.\r\n  capitalize_Words(str) {\r\n    return str.replace(/\\w\\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });\r\n  }\r\n  //method renders an input form for new recipes\r\n  showInput() {\r\n    this.setState({ inputRecipe: <Container><div className=\"row align-items-center justify-content-center\"><PostRecipe user={this.state.userData} token={this.state.token} goBack={this.goBack} /></div></Container> })\r\n  }\r\n  //props function in recipe input form, used to return to main page\r\n  goBack(doRefresh) {\r\n    if (doRefresh) {\r\n      this.loadRecipes()\r\n    }\r\n    this.setState({ inputRecipe: \"\" })\r\n  }\r\n  //method capitalizes only the first letter in a string, used for descriptions etc.\r\n  jsUcfirst(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n  }\r\n  //method increments a recipe's rating by +1 if user has not already voted\r\n  plusRating(title, index) {\r\n    let self = this\r\n    fetch('/api/user/didvote', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.userData,\r\n        recipeTitle: title,\r\n        token: this.state.token\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          fetch('/api/recipes/plusrating', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              title: title,\r\n              token: this.state.token\r\n            }),\r\n          }).then((res) => { return res.json() }).then((json) => {\r\n            if (json.success) {\r\n              //this.loadRecipes()\r\n              let newRecipe = {}\r\n              fetch('/api/recipes/find', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  title: title,\r\n                  token: this.state.token\r\n                }),\r\n              }).then((res) => {\r\n                return res.json()\r\n              }).then((result) => {\r\n                newRecipe = result[0]\r\n                let newRecipeArray = [...self.state.recipes]\r\n                let ratingButtons = <div><p>Already voted! - <span style={{ fontWeight: \"bold\"}}>Rating: {newRecipe.rating} </span></p></div>\r\n                newRecipeArray[index] = <Col key={index} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <img onClick={() => { self.showDesc(newRecipe, ratingButtons) }} src={newRecipe.image} id=\"imgClick\" style={{ height: \"auto\", maxHeight: \"275px\"}}className=\"img-fluid shadow p-1 mb-3 rounded\" ></img><p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(newRecipe.title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {newRecipe.user} </span><br></br> {self.jsUcfirst(newRecipe.description)}</p>{ratingButtons}<br></br></div></Col>\r\n                self.setState({ recipes: newRecipeArray })\r\n\r\n                //if page is currently displayed a recipe description, refresh the component to display new rating properly\r\n                if (self.state.recipeDescription) {\r\n                  self.setState({ recipeDescription: \"\" })\r\n                  //send the detailed description page a special goBack function, to fully reload page recipes (avoids duplicate recipe error)\r\n                  let refreshPage = () => {\r\n                    this.loadRecipes()\r\n                    this.setState({ recipeDescription: \"\" })\r\n                  }\r\n                  this.showDesc(newRecipe, ratingButtons, refreshPage)\r\n                }\r\n                //if there is currently a search term filtering results, refresh the filtering to display new rating properly\r\n                if (self.state.searchTerm) {\r\n                  self.handleSearch()\r\n                }\r\n                //if user is currently viewing their own recipes, refresh the list to update rankings properly\r\n                if (self.state.showMyRecipes) {\r\n                  self.loadRecipes()\r\n                }\r\n\r\n              })\r\n            }\r\n          }\r\n          )\r\n        } else {\r\n          alert(\"already voted!\")\r\n        }\r\n      });\r\n  }\r\n  //method increments a recipe's rating by -1 if user has not already voted\r\n  minusRating(title, index) {\r\n    let self = this\r\n    fetch('/api/user/didvote', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.userData,\r\n        recipeTitle: title,\r\n        token: this.state.token\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(json => {\r\n        if (json.success) {\r\n          fetch('/api/recipes/minusrating', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              title: title,\r\n              token: this.state.token\r\n            })\r\n          }).then((res) => { return res.json() }).then((json) => {\r\n            if (json.success) {\r\n              let newRecipe = {}\r\n              fetch('/api/recipes/find', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  title: title,\r\n                  token: this.state.token\r\n                }),\r\n              }).then((res) => {\r\n                return res.json()\r\n              }).then((result) => {\r\n                newRecipe = result[0]\r\n                let newRecipeArray = [...self.state.recipes]\r\n                let ratingButtons = <div><p>Already voted! - <span style={{ fontWeight: \"bold\"}}>Rating: {newRecipe.rating} </span></p></div>\r\n                newRecipeArray[index] = <Col key={index} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <img onClick={() => { self.showDesc(newRecipe, ratingButtons) }} src={newRecipe.image} id=\"imgClick\" style={{ height: \"auto\", maxHeight: \"275px\"}} className=\"img-fluid shadow p-1 mb-3 rounded\" ></img><p><span style={{ fontWeight: \"bold\" }}>{self.capitalize_Words(newRecipe.title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {newRecipe.user} </span><br></br> {self.jsUcfirst(newRecipe.description)}</p>{ratingButtons}<br></br></div></Col>\r\n                self.setState({ recipes: newRecipeArray })\r\n\r\n                //if page is currently displayed a recipe description, refresh the component to display new rating properly\r\n                if (self.state.recipeDescription) {\r\n                  self.setState({ recipeDescription: \"\" })\r\n                  //send the detailed description page a special goBack function, to fully reload page recipes (avoids duplicate recipe error)\r\n                  let refreshPage = () => {\r\n                    this.loadRecipes()\r\n                    this.setState({ recipeDescription: \"\" })\r\n                  }\r\n                  this.showDesc(newRecipe, ratingButtons, refreshPage)\r\n                }\r\n                //if there is currently a search term filtering results, refresh the filtering to display new rating properly\r\n                if (self.state.searchTerm) {\r\n                  self.handleSearch()\r\n                }\r\n                //if user is currently viewing their own recipes, refresh the list to update rankings properly\r\n                if (self.state.showMyRecipes) {\r\n                  self.loadRecipes()\r\n                }\r\n\r\n              })\r\n            }\r\n          }\r\n          )\r\n        } else {\r\n          alert(\"already voted!\")\r\n        }\r\n      });\r\n\r\n  }\r\n  //load a random recipe from the server\r\n  loadRandomRecipe() {\r\n    let i = Math.floor(Math.random()*this.state.recipes.length)\r\n    fetch('/api/recipes', {\r\n      method: 'GET',\r\n      headers: {\r\n        'token': this.state.token\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        fetch('/api/user/didvote', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            user: this.state.userData,\r\n            recipeTitle: json[i].title,\r\n            dontChange: true,\r\n            token: this.state.token\r\n          }),\r\n        }).then(res => res.json())\r\n          .then(goodJson => {\r\n            let ratingButtons = \"\"\r\n            if (goodJson.success) {\r\n              ratingButtons = <div><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { this.plusRating(json[i].title, i) }}>\t+ </Button><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { this.minusRating(json[i].title, i) }}> - </Button> <p style={{ fontWeight: \"bold\"}}>Rating: {json[i].rating} </p></div>\r\n            } else {\r\n              ratingButtons = <div><p>Already voted!</p> <p style={{ fontWeight: \"bold\"}}>Rating: {json[i].rating} </p></div>\r\n            }\r\n            this.showDesc(json[i], ratingButtons)\r\n          })\r\n      })\r\n    \r\n  }\r\n  //method fetches all recipes from database, sorts by rating in descending order, and format them for display\r\n  loadRecipes() {\r\n\r\n    let self = this\r\n    this.setState({ isLoading: true })\r\n    return fetch('/api/recipes', {\r\n      method: 'GET',\r\n      headers: {\r\n        'token': this.state.token\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        let allRecipes = []\r\n        let myRecipes = []\r\n        //sort by rating in descending order\r\n        json.sort(function (a, b) {\r\n          return b.rating - a.rating\r\n        })\r\n        //check if current user voted already on each recipe\r\n        for (let i = 0; i < json.length; i++) {\r\n          let recipeItem = fetch('/api/user/didvote', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              user: self.state.userData,\r\n              recipeTitle: json[i].title,\r\n              dontChange: true,\r\n              token: this.state.token\r\n            }),\r\n          }).then(res => res.json())\r\n            .then(goodJson => {\r\n              let ratingButtons = \"\"\r\n              if (goodJson.success) {\r\n                ratingButtons = <div><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { this.plusRating(json[i].title, i) }}>\t+ </Button><Button style={{ border: \"1px solid black\", width: \"45px\", height: \"45px\", fontWeight: \"bold\", fontSize: \"20px\" }} variant=\"info\" onClick={() => { this.minusRating(json[i].title, i) }}> - </Button> -<span style={{ fontWeight: \"bold\"}}> Rating: {json[i].rating} </span></div>\r\n              } else {\r\n                ratingButtons = <div><p>Already voted! - <span style={{ fontWeight: \"bold\"}}>Rating: {json[i].rating} </span></p></div>\r\n              }\r\n              let recipeTitleByIndex = self.state.recipeTitleByIndex\r\n              recipeTitleByIndex[i] = json[i].title\r\n              self.setState({ recipeTitleByIndex: recipeTitleByIndex })\r\n\r\n              // if current user is the author of a recipe, add it to their own array\r\n              if (self.state.userData === json[i].user) {\r\n                myRecipes.push(<Col key={i} xs=\"6\" sm=\"4\"><div style={{ textAlign: \"left\" }}>    <img onClick={() => { this.showDesc(json[i], ratingButtons) }} src={json[i].image} id=\"imgClick\" style={{ height: \"auto\", maxHeight: \"275px\"}} className=\"img-fluid shadow p-1 mb-3 rounded\" ></img><p><span style={{ fontWeight: \"bold\" }}>{this.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {this.jsUcfirst(json[i].description)}</p>{ratingButtons}<br></br></div></Col>)\r\n              }\r\n\r\n              return <Col key={i} xs=\"6\" sm=\"4\"><div style={{textAlign: \"left\"}}>    <img onClick={() => { this.showDesc(json[i], ratingButtons) }} src={json[i].image} id=\"imgClick\" style={{ height: \"auto\", maxHeight: \"275px\"}} className=\"img-fluid shadow p-1 mb-3 rounded\" ></img><p><span style={{ fontWeight: \"bold\" }}>{this.capitalize_Words(json[i].title)}</span> <br></br><span style={{ fontStyle: \"italic\" }}>By {json[i].user} </span><br></br> {this.jsUcfirst(json[i].description)}</p>{ratingButtons}<br></br></div></Col>\r\n            })\r\n          allRecipes.push(recipeItem)\r\n        }\r\n        Promise.all(allRecipes).then((allRecipes) => {\r\n          if (!myRecipes[0]) {\r\n            myRecipes.push(<h3>Nothing to show!</h3>)\r\n          }\r\n          this.setState({ recipes: allRecipes, myRecipes: myRecipes, isLoading: false })\r\n        })\r\n      })\r\n\r\n\r\n  }\r\n  //method shows a detailed description of recipe upon clicking\r\n  showDesc(recipe, ratingButtons, altGoBack) {\r\n    let self = this\r\n    let arrayOfElements = []\r\n    for (let i = 0; i < recipe.ingredients.length; i++) {\r\n      arrayOfElements.push(<div>{`\\u2022`} {recipe.ingredients[i]}<br></br></div>)\r\n    }\r\n    let goBack = () => { self.setState({ recipeDescription: \"\" }) }\r\n    // if given, pass on a different goBack method for the description page\r\n    if (altGoBack) {\r\n      goBack = altGoBack\r\n    }\r\n    let newComponent = <RecipeDescription token={this.state.token} currentUser={this.state.userData} ratingButtons={ratingButtons} title={this.capitalize_Words(recipe.title)} user={recipe.user} imgSrc={recipe.image} elements={arrayOfElements} longDesc={recipe.longDescription} instructions={recipe.instructions} goBack={goBack} />\r\n    this.setState({ recipeDescription: newComponent })\r\n    window.scrollTo(0, 0)\r\n  }\r\n  toggleMyRecipes() {\r\n    if (this.state.showMyRecipes) {\r\n      this.setState({ showMyRecipes: false, toggleMyRecipesText: \"Show My Recipis\" })\r\n    } else {\r\n      this.setState({ showMyRecipes: true, toggleMyRecipesText: \"Show All Recipis\" })\r\n    }\r\n  }\r\n  toggleMap() {\r\n    if (this.state.showMap) {\r\n      this.setState({ showMap: false })\r\n    } else {\r\n      this.setState({ showMap: true })\r\n    }\r\n  }\r\n  //logs user out of current session\r\n  logout(token) {\r\n    this.setState({ isLoading: true })\r\n    //NOW STATELESS - simply clear token from client-side\r\n    this.props.saveToken(\"\")\r\n    this.setState({ logout: true, isLoggedIn: false, isLoading: false })\r\n\r\n  }\r\n  render() {\r\n    //if content is loading, display Loading ... screen\r\n    if (this.state.isLoading) {\r\n      return <Container style={{height: \"900px\"}}> <div className=\"text-center\"><h2 className=\"text-center\">Loading ... </h2> </div></Container>\r\n    }\r\n    //if a description exists in state, display that component\r\n    if (this.state.recipeDescription) {\r\n      return this.state.recipeDescription\r\n    }\r\n    //after logging out of session, return to entry page\r\n    if (this.state.logout) {\r\n      return <Redirect to='/' />\r\n    }\r\n    //if input form exists in state, display that component\r\n    if (this.state.inputRecipe) {\r\n      return this.state.inputRecipe\r\n    }\r\n    if (this.state.showMap) {\r\n      return <div className=\"text-center\" style={{height: \"900px\", margin: \"0px\"}}><Button className=\"btn\" style={{margin: \"5px\"}} variant=\"info\" onClick={this.toggleMap}>Toggle Map</Button><br></br><Map token={this.state.token} /></div>\r\n    }\r\n    //check for token\r\n    if (this.state.token) {\r\n      //if token is valid and user successfully authenticates, display main recipes page\r\n      if (this.state.isLoggedIn) {\r\n        let displayedRecipes = \"\"\r\n        //if there is currently a non-empty search term string, only display filtered recipes\r\n        if (this.state.searchTerm !== \"\") {\r\n          displayedRecipes = <Row>{this.state.filtRecipes}</Row>\r\n        } else {\r\n          displayedRecipes = <Row>{this.state.recipes}</Row>\r\n        }\r\n        if (this.state.showMyRecipes) {\r\n          displayedRecipes = <Row>{this.state.myRecipes}</Row>\r\n        }\r\n        \r\n        return (\r\n        <div>\r\n        <Container>\r\n          <h3 className=\"text-center\"> Welcome {this.state.userData}, check out these Recipis!</h3>\r\n          <Form onSubmit={(e)=>{e.preventDefault()}}>\r\n            <Form.Group controlId=\"formSearchTerms\">\r\n              <Form.Control\r\n                value={this.state.searchTerm}\r\n                onChange={this.handleSearch}\r\n                type=\"search\"\r\n                placeholder=\"Search Recipi titles ...\" />\r\n            </Form.Group>\r\n          </Form>\r\n          <br></br>\r\n\r\n          <div className=\"text-center\">\r\n            <Button className=\"btn\" style={{margin: \"3px\"}} variant=\"info\" onClick={this.showInput}>Post a Recipi</Button>    <span> </span>\r\n            <Button className=\"btn\" style={{margin: \"3px\"}} variant=\"info\" onClick={this.toggleMyRecipes}>{this.state.toggleMyRecipesText}</Button>    <span> </span>\r\n            <Button className=\"btn\" style={{margin: \"3px\"}} variant=\"info\" onClick={this.toggleMap}>Toggle Map</Button>\r\n            <Button className=\"btn\" style={{margin: \"3px\"}} variant=\"info\" onClick={this.loadRandomRecipe}>Choose For Me</Button>\r\n          </div>\r\n          <br></br>\r\n          \r\n            {displayedRecipes}\r\n            <br></br>\r\n        \r\n          <div className=\"text-center\">\r\n            <Button className=\"btn\" variant=\"secondary\" onClick={() => { this.logout(this.state.token) }}>Logout</Button>\r\n          </div>\r\n        </Container>\r\n        </div>)\r\n      } else {\r\n        return (<Container><div className=\"text-center\"><p>Loading ... </p></div></Container>)\r\n      }\r\n    }\r\n    //if no token exists to authenticate, return to entrypage \r\n    else if (!this.state.token) {\r\n      return (<div><Redirect to=\"/\" /></div>)\r\n    }\r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from \"react\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport LoginForm from './components/LoginForm'\nimport Home from './components/Home'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      token: \"\"\n    };\n    this.saveToken = this.saveToken.bind(this);\n  }\n  componentDidMount() {\n    document.title = \"Recipi\"\n\n    //check if there exists a token in localStorage already, and if so, try to verify it\n    if (this.state.token === \"\" && localStorage.getItem('tokenItem')) {\n      //start by saving localStorage token to state\n      var newToken = localStorage.getItem('tokenItem');\n      this.setState({ token: newToken })\n    } else if (this.state.token) {\n      fetch('/api/account/verify', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'token': this.state.token\n        }\n      }).then(res => res.json())\n        .then(json => {\n          if (json.success) {\n            //if token is valid, continue using it\n            console.log(\"token is valid\")\n          } else {\n            //otherwise, clear local storage and state \n            this.saveToken(\"\")\n          }\n        });\n    }\n  }\n  saveToken(token) {\n    console.log(\"saveToken is called with token: \"+token)\n    localStorage.setItem('tokenItem', token)\n    this.setState({ token: token })\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header id=\"headerClick\" style={{ backgroundColor: \"#6dc4ed\" }}>\n            <h1 onClick={()=>{\n                window.location.href = '/'\n              }} className=\"Recipi\"> Recipi </h1>\n          </header>\n          <body style={{ backgroundColor: \"#e6f5fc\", color: \"#1c7fad\", fontFamily: \"Quicksand\" }}>\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/login\"/>\n            )} />\n            <Route exact path=\"/login\" render={(routeProps) => (\n              <LoginForm {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <Route exact path=\"/home\" render={(routeProps) => (\n              <Home {...routeProps} token={this.state.token} saveToken={this.saveToken} />\n            )} />\n            <br></br>\n          </body>\n          <footer style={{ backgroundColor: \"#6dc4ed\" }}>Website built by Nicolai Antonov, 2019</footer>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}